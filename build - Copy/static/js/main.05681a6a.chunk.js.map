{"version":3,"sources":["components/ContactSettings.tsx","components/Header.tsx","components/Main.tsx","components/Medicine.tsx","components/Alarms.tsx","components/Schedule.tsx","api/auth.tsx","contexts/authContext.js","components/AccountSettings.tsx","components/Splash.tsx","components/Login.tsx","components/PasswordInput.tsx","components/FindAccount.tsx","components/Register.tsx","api/user.tsx","components/PickResetMethod.tsx","components/EnterCode.tsx","components/ResetPassword.tsx","components/PrivateRoute.tsx","App.tsx","theme.js","index.tsx"],"names":["ContactSettings","props","React","Component","Header","className","AppBar","position","Toolbar","Typography","variant","to","activeClassName","Main","this","children","Medicine","Alarms","Schedule","register","email","password","axios","post","login","hasLoginCookie","Cookies","get","createContext","Provider","Consumer","AuthContextProvider","state","isLoggedIn","auth","setState","logout","value","AccountSettings","callback","delete","history","push","error","console","log","context","Button","onClick","e","handleSubmit","color","size","Splash","LoginFailureType","PasswordInput","togglePasswordMask","prevState","passwordIsMasked","classes","TextField","type","InputProps","endAdornment","InputAdornment","getVisibilityIcon","SearchAccountFailureType","Login","submitIsTouched","loginFailureType","NONE","handleEmailChange","bind","handlePasswordChange","target","length","BAD_EMAIL_PASSWORD","INTERNAL_SERVER_ERROR","response","status","data","message","ACCOUNT_LOCKED","onChange","label","emailHasError","helperText","inputProps","maxLength","passwordHasError","FormHelperText","hasFormError","getFormErrorText","Register","passwordIsTouched","emailIsTaken","internalServerError","test","isValidEmail","passwordIsValid","passwordHasCorrectLength","name","getEmailHelperText","getPasswordHelperText","hasInternalServerError","sendResetCode","selectedContactMethod","checkResetCode","resetCode","params","changePassword","PickResetMethodFailureType","FindAccount","contact","searchAccountFailureType","handleContactChange","account","contactInformation","contactInfo","phone","ACCOUNT_NOT_FOUND","contactHasError","displayFormError","EnterCodeStatusType","PickResetMethod","qs","parse","location","search","ignoreQueryPrefix","pickResetMethodFailureType","handleChange","userAPI","emailOption","Radio","checked","Divider","phoneOption","Paper","elevation","ResetPasswordFailureType","EnterCode","qsParse","code","enterCodeStatusType","handleCodeChange","resendCodeClicked","displayCodeTextFieldError","codeIsValid","INVALID_PASSCODE","CODE_EXPIRED","TOO_MANY_ATTEMPTS","RESENT_CODE","contactDetail","getCodeHelperText","displayFormHelperText","formHelperTextIsError","getFormHelperText","displayResendCodeLink","ResetPassword","resetPasswordFailureType","submitButtonTouched","passwordChangeSuccess","passwordHasCorrectCharacters","PASSWORD_EXPIRED","setTimeout","displayPasswordError","PrivateRoute","options","component","path","App","exact","theme","createMuiTheme","palette","primary","teal","secondary","orange","danger","responsiveFontSizes","ReactDOM","render","StrictMode","ThemeProvider","document","getElementById"],"mappings":"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","file":"static/js/main.05681a6a.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\ntype ContactSettingsState = {\r\n\r\n}\r\n\r\ntype ContactSettingsProps = {\r\n\r\n}\r\n\r\nclass ContactSettings extends React.Component<{}, ContactSettingsState> {\r\n    constructor(props: ContactSettingsProps) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <h1>ContactSettings</h1>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ContactSettings;","import React, { Component } from 'react';\r\n\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport AccountCircle from '@material-ui/icons/AccountCircle';\r\nimport AccessAlarmIcon from '@material-ui/icons/AccessAlarm';\r\nimport EventIcon from '@material-ui/icons/Event';\r\nimport SettingsPhoneIcon from '@material-ui/icons/SettingsPhone';\r\nimport LocalHospitalIcon from '@material-ui/icons/LocalHospital';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nimport './Header.css';\r\n\r\ntype HeaderState = {\r\n\r\n}\r\n\r\ntype HeaderProps = {\r\n\r\n}\r\n\r\nclass Header extends React.Component<{}, HeaderState> {\r\n    constructor(props: HeaderProps) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"app-bar-container\">\r\n                <AppBar position=\"static\">\r\n                    <Toolbar>\r\n                        <Typography variant=\"h6\" className=\"title\"></Typography>\r\n                        <nav>\r\n                            <NavLink className=\"icon-container\" to=\"/features/medicine\" activeClassName=\"icon-container-active\">\r\n                                <LocalHospitalIcon className=\"icon\" />\r\n                                <div className=\"icon-description\">Medicines</div>\r\n                            </NavLink>\r\n                            <NavLink className=\"icon-container\" to=\"/features/contactsettings\" activeClassName=\"icon-container-active\">\r\n                                <SettingsPhoneIcon className=\"icon\" />\r\n                                <div className=\"icon-description\">Calls</div>\r\n                            </NavLink>\r\n                            <NavLink className=\"icon-container\" to=\"/features/alarms\" activeClassName=\"icon-container-active\">\r\n                                <AccessAlarmIcon className=\"icon\" />\r\n                                <div className=\"icon-description\">Alarms</div>\r\n                            </NavLink>\r\n                            <NavLink className=\"icon-container\" to=\"/features/schedule\" activeClassName=\"icon-container-active\">\r\n                                <EventIcon className=\"icon\" />\r\n                                <div className=\"icon-description\">Schedule</div>\r\n                            </NavLink>\r\n                            <NavLink className=\"icon-container\" to=\"/features/accountsettings\" activeClassName=\"icon-container-active\">\r\n                                <AccountCircle className=\"icon\" />\r\n                                <div className=\"icon-description\">Account</div>\r\n                            </NavLink>\r\n                        </nav>\r\n                    </Toolbar>\r\n                </AppBar>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;","import React, { ReactChildren, ReactChild } from 'react';\r\n\r\n\r\nimport Header from './Header';\r\n\r\ninterface MainProps {\r\n  children: any; /* ReactChild | ReactChildren; */\r\n}\r\n\r\ninterface MainState {}\r\n\r\nclass Main extends React.Component <{}, MainState > {\r\n  constructor(props: MainProps) {\r\n    super(props);\r\n}\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Header/>\r\n        <main>{this.props.children}</main>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Main;","import React, { Component } from 'react';\r\n\r\ntype MedicineState = {\r\n  \r\n}\r\n\r\ntype MedicineProps = {\r\n\r\n}\r\n\r\nclass Medicine extends React.Component<MedicineProps, MedicineState> {\r\n    constructor(props: MedicineProps) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <h1>Medicine</h1>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Medicine;","import React, { Component } from 'react';\r\n\r\ntype AlarmsState = {\r\n  \r\n}\r\n\r\ntype AlarmsProps = {\r\n\r\n}\r\n\r\nclass Alarms extends React.Component<{}, AlarmsState> {\r\n    constructor(props: AlarmsProps) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <h1>Alarms</h1>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Alarms;","import React, { Component } from 'react';\r\n\r\ntype ScheduleState = {\r\n  \r\n}\r\n\r\ntype ScheduleProps = {\r\n\r\n}\r\n\r\nclass Schedule extends React.Component<{}, ScheduleState> {\r\n    constructor(props: ScheduleProps) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <h1>Schedule</h1>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Schedule;","// TODO: Should I rename this?\r\n\r\nimport axios, { AxiosError, AxiosResponse } from 'axios';\r\n\r\nimport Cookies from 'universal-cookie';\r\n\r\n\r\n// TODO: Return type\r\nexport const register = (email: string, password: string) => {\r\n    return axios.post('/api/users', {\r\n        email, password\r\n    });\r\n}\r\n\r\nexport const login = (email: string, password: string) => {\r\n    return axios.post('/api/users/login', {\r\n        email, password\r\n    });\r\n}\r\n\r\nexport const logout = () => {\r\n    return axios.delete('/api/users/logout');\r\n}\r\n\r\nexport const hasLoginCookie = (): boolean => {\r\n    const cookies: Cookies = new Cookies();\r\n    return cookies.get('jwt') ? true : false;\r\n}","import React, { Component } from \"react\";\r\nimport * as auth from '../api/auth';\r\n\r\nconst { Provider, Consumer } = React.createContext();\r\n\r\nclass AuthContextProvider extends Component {\r\n  state = {\r\n    isLoggedIn: auth.hasLoginCookie()\r\n  };\r\n\r\n  login = () => {\r\n    this.setState({ isLoggedIn: true})\r\n  };\r\n\r\n  logout = () => {\r\n    this.setState({ isLoggedIn: false})\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Provider value={{ isLoggedIn: this.state.isLoggedIn, login: this.login, logout: this.logout }}>\r\n        {this.props.children}\r\n      </Provider>\r\n    );\r\n  }\r\n}\r\n\r\nexport { AuthContextProvider, Consumer as AuthContextConsumer };\r\n","import React, { Component } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\n\r\n\r\nimport * as auth from '../api/auth';\r\n\r\n\r\nimport { AuthContextConsumer } from '../contexts/authContext';\r\n\r\ntype AccountSettingsState = {\r\n  \r\n}\r\n\r\ntype AccountSettingsProps = {\r\n    history: any;\r\n}\r\n\r\nclass AccountSettings extends React.Component<AccountSettingsProps, AccountSettingsState> {\r\n    constructor(props: AccountSettingsProps) {\r\n        super(props);\r\n    }\r\n\r\n    handleSubmit(callback: any) {\r\n        try {\r\n            auth.logout();\r\n\r\n            callback();\r\n\r\n            this.props.history.push('/login');\r\n        }\r\n        catch(error) {\r\n            console.log('error',error)\r\n            \r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>Account Settings</h1>\r\n\r\n                <AuthContextConsumer>\r\n                {context => (\r\n                    <Button onClick={ e => this.handleSubmit(context.logout)} className=\"auth-btn\" variant=\"contained\" color=\"primary\" size=\"medium\">Logout</Button>\r\n                )}\r\n                </AuthContextConsumer>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AccountSettings;","import './Splash.css';\r\n\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport { Link } from 'react-router-dom';\r\n\r\n// TODO: move typography font-weight: 400 to theme\r\nfunction Splash() {\r\n    return (\r\n      <div className=\"landing-page-container\">\r\n        <div className=\"info-box\">\r\n          <Typography className=\"splash-header\" color=\"primary\" variant=\"h1\">RoboNurse</Typography>\r\n          <div className=\"description\">Never forget to take your medicines again with our medicine reminder calls.</div>\r\n          <Link className=\"no-underline\" to=\"/features/medicine\">\r\n            <Button variant=\"contained\" color=\"primary\" className=\"start-btn\">Get Started</Button>\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  export default Splash;","import React, { Component, useContext } from 'react';\r\nimport { Link, Redirect } from 'react-router-dom';\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\n\r\nimport PasswordInput from './PasswordInput';\r\n\r\nimport * as auth from '../api/auth';\r\n\r\nimport { AuthContextConsumer } from '../contexts/authContext';\r\n\r\n\r\nimport './Login.css';\r\n\r\nenum LoginFailureType {\r\n    BAD_EMAIL_PASSWORD,\r\n    INTERNAL_SERVER_ERROR,\r\n    ACCOUNT_LOCKED,\r\n    NONE\r\n}\r\n\r\ntype LoginState = {\r\n    email: string,\r\n    password: string,\r\n    submitIsTouched: boolean,\r\n    loginFailureType: LoginFailureType\r\n}\r\n\r\ntype LoginProps = {\r\n    history: any // TODO: Fix this type\r\n}\r\n\r\nclass Login extends React.Component<LoginProps, LoginState> {\r\n    constructor(props: LoginProps) {\r\n        super(props);\r\n\r\n        this.state = { email: '', password: '', submitIsTouched: false, loginFailureType: LoginFailureType.NONE };\r\n        \r\n        this.handleEmailChange = this.handleEmailChange.bind(this);\r\n        this.handlePasswordChange = this.handlePasswordChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this); \r\n    }\r\n\r\n    handleEmailChange(e: any) {\r\n        const email = e.target.value;\r\n        this.setState({email});\r\n    }\r\n\r\n    emailHasError(): boolean {\r\n        const { email, submitIsTouched } = this.state;\r\n        return email.length === 0 && submitIsTouched;\r\n    }\r\n    \r\n    handlePasswordChange(e: any) {\r\n        const password = e.target.value;\r\n        this.setState({password});\r\n    }\r\n\r\n    passwordHasError(): boolean {\r\n        const { password, submitIsTouched } = this.state;\r\n        return password.length === 0 && submitIsTouched;\r\n    }\r\n\r\n    hasFormError(): boolean {\r\n        return this.state.loginFailureType !== LoginFailureType.NONE;\r\n    }\r\n\r\n    getFormErrorText() {\r\n        if (this.state.loginFailureType === LoginFailureType.BAD_EMAIL_PASSWORD) {\r\n            return 'The password you’ve entered is incorrect.';\r\n        }\r\n        else if ( this.state.loginFailureType === LoginFailureType.INTERNAL_SERVER_ERROR ) {\r\n            return 'Uh-oh! A problem occured. Please refresh the page and try again.';\r\n        }\r\n\r\n        return '';\r\n    }\r\n\r\n    async handleSubmit(callback: any) {\r\n        const { email, password } = this.state;\r\n\r\n        this.setState({submitIsTouched: true, loginFailureType: LoginFailureType.NONE});\r\n\r\n        if ( email.length === 0 || password.length === 0 ) {\r\n            return;\r\n        }\r\n\r\n        try {\r\n            await auth.login(email,password);\r\n            \r\n            callback();\r\n            \r\n            this.props.history.push('/features/schedule');\r\n        }\r\n        catch ( error ) {\r\n            if ( error.response.status === 401 ) {\r\n                if ( error.response.data.message === 'Email or password is incorrect' ) { // Keep text same as client\r\n                    this.setState({loginFailureType: LoginFailureType.BAD_EMAIL_PASSWORD});\r\n                }\r\n                else if ( error.response.data.message === 'Account locked' ) { // Keep text same as server\r\n                    this.setState({loginFailureType: LoginFailureType.ACCOUNT_LOCKED});\r\n                }\r\n                else {\r\n                    console.error(\"Unknown 401 status code response\", error);\r\n                }\r\n            }\r\n            else if ( error.response.status === 500 ) {\r\n                this.setState({loginFailureType: LoginFailureType.INTERNAL_SERVER_ERROR});\r\n            }\r\n            else {\r\n                console.error('Unhandled error'); // TODO: Handle this\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        if ( this.state.loginFailureType === LoginFailureType.ACCOUNT_LOCKED ) {\r\n            return (<Redirect to=\"/findaccount\"/>);\r\n        }\r\n\r\n        return (\r\n            <div className=\"auth-page-container\">\r\n                <div className=\"auth-page\">\r\n                    <Typography className=\"auth-header\" color=\"primary\" variant=\"h4\">Login to Your Account</Typography>\r\n                    <form className=\"auth-form\">\r\n                        <TextField onChange={this.handleEmailChange} className=\"auth-txt-field\" label=\"Email\" variant=\"filled\" error={this.emailHasError()} helperText=\"Enter your email\"/>\r\n                        <PasswordInput onChange={this.handlePasswordChange} inputProps={{ maxLength: 32 }} className=\"auth-txt-field\" error={this.passwordHasError()} helperText=\"Enter your password\" label=\"Password\"/>\r\n                        <AuthContextConsumer>\r\n                        {context => (\r\n                            <Button onClick={ e => this.handleSubmit(context.login)} className=\"auth-btn\" variant=\"contained\" color=\"primary\" size=\"medium\">Login</Button>\r\n                        )}\r\n                        </AuthContextConsumer>\r\n                        <FormHelperText className={`auth-err ${this.hasFormError() ? \"\" : \"display-none\"}`} error={true}>{this.getFormErrorText()}</FormHelperText>\r\n                        <div className=\"non-important-btns-container\">\r\n                            <Link className=\"no-underline\" to=\"/register\">\r\n                                <Button className=\"non-important-btn\" color=\"primary\">Create Account</Button>\r\n                            </Link>\r\n                            <Link className=\"no-underline\" to=\"/findaccount\">\r\n                                <Button className=\"non-important-btn\" color=\"primary\">Forgot Password?</Button>\r\n                            </Link>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Login;","import { InputAdornment } from '@material-ui/core';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport VisibilityIcon from '@material-ui/icons/Visibility';\r\nimport VisibilityOffIcon from '@material-ui/icons/VisibilityOff';\r\nimport React, {Component } from 'react';\r\n\r\nimport './PasswordInput.css';\r\n\r\ntype PasswordInputState = {\r\n    passwordIsMasked: boolean\r\n}\r\n\r\n//https://itnext.io/building-a-toggled-mask-password-input-component-w-react-and-material-ui-f55e6bd73434\r\n\r\n\r\ntype PasswordInputProps = {\r\n    classes?: any,\r\n    onChange?: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n    value?: string,\r\n    error?: boolean,\r\n    helperText?: string,\r\n    label?: string,\r\n    className?: string,\r\n    inputProps?: object,\r\n}\r\n\r\nclass PasswordInput extends Component<PasswordInputProps, PasswordInputState> {\r\n    constructor(props: PasswordInputProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            passwordIsMasked: true\r\n        };\r\n    }\r\n\r\n    togglePasswordMask = () => {\r\n        this.setState(prevState => ({\r\n            passwordIsMasked: !prevState.passwordIsMasked\r\n        }));\r\n    }\r\n\r\n    getVisibilityIcon() {\r\n        if ( this.state.passwordIsMasked ) {\r\n            return (\r\n                <VisibilityIcon color=\"primary\" onClick={this.togglePasswordMask} className=\"clickable-icon\"/>\r\n            );\r\n        }\r\n        \r\n        return (\r\n            <VisibilityOffIcon color=\"primary\" onClick={this.togglePasswordMask} className=\"clickable-icon\"/>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n        const { passwordIsMasked } = this.state;\r\n\r\n        return (\r\n            <TextField\r\n                variant=\"filled\"\r\n                type={passwordIsMasked ? 'password' : 'text'}\r\n                {...this.props}\r\n                InputProps={{\r\n                    endAdornment: (\r\n                        <InputAdornment position=\"end\">\r\n                            {this.getVisibilityIcon()}\r\n                        </InputAdornment>\r\n                    ),\r\n                }}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default PasswordInput;","import React, { Component, useContext } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\n\r\nimport * as userAPI from '../api/user';\r\n\r\nimport './FindAccount.css';\r\n\r\ntype FindAccountState = {\r\n    contact: string,\r\n    searchAccountFailureType: SearchAccountFailureType,\r\n    submitIsTouched: boolean\r\n}\r\n\r\ntype FindAccountProps = {\r\n    history: any\r\n}\r\n\r\nenum SearchAccountFailureType {\r\n    ACCOUNT_NOT_FOUND,\r\n    INTERNAL_SERVER_ERROR,\r\n    NONE\r\n}\r\n\r\nclass FindAccount extends React.Component<FindAccountProps, FindAccountState> {\r\n\r\n    constructor(props: FindAccountProps) {\r\n        super(props);\r\n\r\n        this.state = { contact: '', searchAccountFailureType: SearchAccountFailureType.NONE, submitIsTouched: false };\r\n\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.handleContactChange = this.handleContactChange.bind(this);\r\n    }\r\n\r\n    handleContactChange(e: any) {\r\n        const contact = e.target.value;\r\n        this.setState({contact});\r\n    }\r\n\r\n    contactHasError(): boolean {\r\n        const { submitIsTouched, contact } = this.state;\r\n\r\n        return contact.length === 0 && submitIsTouched;\r\n    }\r\n\r\n    async handleSubmit(e: any) {\r\n        const { contact } = this.state;\r\n\r\n        this.setState({submitIsTouched: true});\r\n\r\n        if ( contact.length === 0 ) {\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const contactInfo: any = await (await userAPI.findAccount(contact)).data.contactInformation; // TODO: Create model for this\r\n            console.log(\"contactInfo\",contactInfo)\r\n            this.setState({searchAccountFailureType: SearchAccountFailureType.NONE, submitIsTouched: false});\r\n            this.props.history.push(`/pickresetmethod?email=${contactInfo.email}&phone=${contactInfo.phone}`); // TODO: Change this\r\n        }\r\n        catch(error) {\r\n            if ( error.response.status === 404 ) {\r\n                this.setState({searchAccountFailureType: SearchAccountFailureType.ACCOUNT_NOT_FOUND});\r\n            }\r\n            else if ( error.response.status === 500 ) {\r\n                this.setState({searchAccountFailureType: SearchAccountFailureType.INTERNAL_SERVER_ERROR});\r\n            }\r\n        }\r\n    }\r\n\r\n    displayFormError(): boolean {\r\n        return this.state.searchAccountFailureType !== SearchAccountFailureType.NONE;\r\n    }\r\n\r\n    getFormErrorText(): string {\r\n        if ( this.state.searchAccountFailureType === SearchAccountFailureType.ACCOUNT_NOT_FOUND ) {\r\n            return 'We couldnt find an account with that contact information.';\r\n        }\r\n        else if ( this.state.searchAccountFailureType === SearchAccountFailureType.INTERNAL_SERVER_ERROR ) {\r\n            return 'Internal error. Refresh the page.';\r\n        }\r\n\r\n        return '';\r\n    }\r\n\r\n    // TODO: auth-err really should be renamed\r\n    render() {\r\n        return (\r\n            <div className=\"auth-page-container\">\r\n                <div className=\"auth-page\">\r\n                    <Typography className=\"auth-header\" color=\"primary\" variant=\"h4\">Find Account</Typography>\r\n                    <form className=\"auth-form\">\r\n                        <FormHelperText className=\"forgot-pw-desc\">Enter your email or phone number to search for your account.</FormHelperText>\r\n                        <TextField onChange={this.handleContactChange} className=\"auth-txt-field\" label=\"Email or Phone\" variant=\"filled\" error={this.contactHasError()} helperText=\"Enter your email or phone number\"/>\r\n                        <Button onClick={ this.handleSubmit } className=\"auth-btn\" variant=\"contained\" color=\"primary\" size=\"medium\">Search</Button>\r\n                        <FormHelperText className={`auth-err ${this.displayFormError() ? \"\" : \"display-none\"}`} error={true}>{this.getFormErrorText()}</FormHelperText>\r\n                    </form>\r\n                    <div className=\"non-important-btns-container\">\r\n                        <Link className=\"no-underline\" to=\"/login\">\r\n                            <Button className=\"find-email-btn non-important-btn\" color=\"primary\">Cancel</Button>\r\n                        </Link>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default FindAccount;","import React, { Component } from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\nimport PasswordInput from './PasswordInput';\r\n\r\n\r\n\r\nimport * as auth from '../api/auth';\r\n\r\nimport { AuthContextConsumer } from '../contexts/authContext';\r\n\r\n\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nimport './Register.css';\r\n\r\ntype RegisterState = {\r\n    email: string,\r\n    password: string,\r\n    passwordIsTouched: boolean,\r\n    submitIsTouched: boolean,\r\n    emailIsTaken: boolean,\r\n    internalServerError: boolean\r\n}\r\n\r\ntype RegisterProps = {\r\n    history: any // TODO: Type\r\n}\r\n\r\nclass Register extends React.Component<RegisterProps, RegisterState> {\r\n    constructor(props: RegisterProps) {\r\n        super(props);\r\n\r\n        this.state = { email: '', password: '', passwordIsTouched: false, submitIsTouched: false, emailIsTaken: false, internalServerError: false };\r\n        \r\n        this.handleEmailChange = this.handleEmailChange.bind(this);\r\n        this.handlePasswordChange = this.handlePasswordChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this); \r\n    }\r\n\r\n    handleEmailChange(e: any) {\r\n        const email = e.target.value;\r\n        this.setState({email, emailIsTaken: false});\r\n    }\r\n\r\n    isValidEmail(): boolean {\r\n        const email = this.state.email;\r\n\r\n        const regex = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n\r\n        return regex.test(email);\r\n    }\r\n\r\n    passwordHasCorrectLength(): boolean {\r\n        const password = this.state.password;\r\n\r\n        return password.length >= 8 && password.length <= 32;\r\n    }\r\n\r\n    // TODO: FIX THIS\r\n    // Checks if the password contains numbers, letters, and special characters\r\n    passwordIsValid(): boolean {\r\n        const password = this.state.password;\r\n\r\n        const regex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[^\\da-zA-Z]).{8,32}$/\r\n\r\n        return regex.test(password);\r\n    }\r\n\r\n    handlePasswordChange(e: any) {\r\n        const password = e.target.value;\r\n        this.setState({password, passwordIsTouched: true});\r\n    }\r\n\r\n    emailHasError(): boolean {\r\n        const { submitIsTouched } = this.state;\r\n\r\n        return !this.isValidEmail() && submitIsTouched;\r\n    }\r\n\r\n    getEmailHelperText(): string {\r\n        if ( this.emailHasError() ) {\r\n            return 'Please enter a valid email';\r\n        }\r\n        else if ( this.state.emailIsTaken ) {\r\n            return 'This email is taken, try another.';\r\n        }\r\n        \r\n        return 'Enter your email';\r\n    }\r\n\r\n    passwordHasError(): boolean {\r\n        const { submitIsTouched } = this.state;\r\n\r\n        return !this.passwordIsValid() && submitIsTouched;\r\n    }\r\n\r\n    getPasswordHelperText(): string {\r\n        if ( !this.passwordHasError() ) {\r\n            return 'Enter a password';\r\n        }\r\n        else if ( this.passwordHasCorrectLength() ) {\r\n            return 'Enter between 8 and 32 characters';\r\n        }\r\n    \r\n        return 'Include a letter, number, and special character';\r\n    }\r\n\r\n    hasInternalServerError(): boolean {\r\n        return this.state.internalServerError;\r\n    }\r\n\r\n    async handleSubmit(callback: any) {\r\n        const { email, password } = this.state;\r\n\r\n        this.setState({submitIsTouched: true, internalServerError: false});\r\n\r\n        if ( !this.isValidEmail() || !this.passwordIsValid() ) {\r\n            return;\r\n        }\r\n\r\n        try {\r\n            await auth.register(email,password);\r\n            \r\n            callback();\r\n   \r\n            this.props.history.push('/features/schedule');\r\n        }\r\n        catch ( error ) {\r\n            if ( error.response.status === 409 ) {\r\n                this.setState({emailIsTaken: true});\r\n            }\r\n            else if ( error.response.status === 500 ) {\r\n                this.setState({internalServerError: true});\r\n            }\r\n            else {\r\n                console.error('Unhandled error'); // TODO: Handle this\r\n            }\r\n        }\r\n    }\r\n\r\n    render(): JSX.Element {\r\n        return (\r\n            <div className=\"auth-page-container\">\r\n                <div className=\"auth-page\">\r\n                    <Typography className=\"auth-header\" color=\"primary\" variant=\"h4\">Create a New Account</Typography>\r\n                    <form className=\"auth-form\">\r\n                        <TextField onChange={this.handleEmailChange} name=\"email\" className=\"auth-txt-field\" label=\"Email\" variant=\"filled\" error={this.emailHasError() || this.state.emailIsTaken} helperText={this.getEmailHelperText()}/>\r\n                        <PasswordInput inputProps={{ maxLength: 32 }} onChange={this.handlePasswordChange} className=\"auth-txt-field\" label=\"Password\" error={this.passwordHasError()} helperText={this.getPasswordHelperText()} />\r\n                        <AuthContextConsumer>\r\n                        {context => (\r\n                            <Button onClick={e => this.handleSubmit(context.login)} className=\"auth-btn\" variant=\"contained\" color=\"primary\" size=\"medium\">Register</Button>\r\n                        )}\r\n                        </AuthContextConsumer>\r\n                        <FormHelperText className={`auth-err ${this.hasInternalServerError() ? \"\" : \"display-none\"}`} error={true}>Uh-oh! A problem occured. Please refresh the page and try again.</FormHelperText>\r\n                        <div className=\"non-important-btns-container\">\r\n                            <Link className=\"no-underline\" to=\"/login\">\r\n                                <Button className=\"already-registered-btn non-important-btn\" color=\"primary\">Already Have an Account?</Button>\r\n                            </Link>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Register;","\r\nimport axios, { AxiosError, AxiosResponse, AxiosRequestConfig } from 'axios';\r\n\r\n\r\n\r\nexport const findAccount = (account: string) => {\r\n    return axios.get(`/api/users/findaccount/${account}`);\r\n}\r\n\r\n\r\nexport const sendResetCode = (email: string, selectedContactMethod: string) => {\r\n    return axios.post('/api/users/sendresetcode', {\r\n        email, selectedContactMethod\r\n    });\r\n}\r\n\r\nexport const checkResetCode = (email: string, resetCode: string) => {\r\n    return axios.get('/api/users/checkresetcode', {\r\n\r\n        params: {\r\n            email,\r\n            resetCode\r\n            }\r\n    });\r\n}\r\n\r\nexport const changePassword = (email: string, password: string, resetCode: string) => {\r\n    return axios.post('/api/users/changepassword', {\r\n        email,\r\n        password,\r\n        resetCode\r\n    });\r\n}","import React, { Component, useContext } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { useLocation } from 'react-router-dom';\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Radio, { RadioProps } from '@material-ui/core/Radio';\r\n\r\nimport qs from 'qs';\r\n\r\nimport AccountCircle from '@material-ui/icons/AccountCircle';\r\n\r\nimport * as userAPI from '../api/user';\r\n\r\nimport './PickResetMethod.css';\r\n\r\ntype PickResetMethodState = {\r\n    email: string,\r\n    phone: string,\r\n    selectedContactMethod: string,\r\n    pickResetMethodFailureType: PickResetMethodFailureType,\r\n}\r\n\r\ntype PickResetMethodProps = {\r\n    location: any, // TODO: params\r\n    history: any // TODO: type\r\n}\r\n\r\nenum PickResetMethodFailureType {\r\n    ACCOUNT_NOT_FOUND,\r\n    INTERNAL_SERVER_ERROR,\r\n    NONE\r\n}\r\n\r\nclass PickResetMethod extends React.Component<PickResetMethodProps, PickResetMethodState> {\r\n\r\n    constructor(props: PickResetMethodProps) {\r\n        super(props);\r\n\r\n        let email: any = '';\r\n        let phone: any = '';\r\n\r\n        if (qs.parse(this.props.location.search, { ignoreQueryPrefix: true })) {\r\n            email = qs.parse(this.props.location.search, { ignoreQueryPrefix: true }).email;\r\n            phone = qs.parse(this.props.location.search, { ignoreQueryPrefix: true }).phone;\r\n        }\r\n\r\n        this.state = { email, selectedContactMethod: 'email', phone, pickResetMethodFailureType: PickResetMethodFailureType.NONE };\r\n\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n    handleChange(e: React.ChangeEvent<HTMLInputElement>) {\r\n        this.setState({ selectedContactMethod: e.target.value });\r\n    }\r\n\r\n    displayFormError(): boolean {\r\n        return this.state.pickResetMethodFailureType !== PickResetMethodFailureType.NONE;\r\n    }\r\n\r\n    getFormErrorText(): string {\r\n        if (this.state.pickResetMethodFailureType === PickResetMethodFailureType.ACCOUNT_NOT_FOUND) {\r\n            return 'We couldnt find that email.';\r\n        }\r\n        else if (this.state.pickResetMethodFailureType === PickResetMethodFailureType.INTERNAL_SERVER_ERROR) {\r\n            return 'Internal error. Refresh the page.';\r\n        }\r\n\r\n        return '';\r\n    }\r\n\r\n    async handleSubmit(e: any) {\r\n        try {\r\n            const { email, phone, selectedContactMethod } = this.state;\r\n\r\n            this.setState({ pickResetMethodFailureType: PickResetMethodFailureType.NONE });\r\n\r\n            await userAPI.sendResetCode(email, selectedContactMethod);\r\n\r\n            this.props.history.push(`/entercode?email=${email}&phone=${phone}&selectedContactMethod=${selectedContactMethod}`);\r\n        }\r\n        catch (error) {\r\n            if (error.response.status === 404) {\r\n                this.setState({ pickResetMethodFailureType: PickResetMethodFailureType.ACCOUNT_NOT_FOUND }); // This should never actually happen, do we really need it?\r\n            }\r\n            else if (error.response.status === 500) {\r\n                this.setState({ pickResetMethodFailureType: PickResetMethodFailureType.INTERNAL_SERVER_ERROR });\r\n            }\r\n        }\r\n    }\r\n    \r\n    render() {\r\n        const { email, phone } = this.state;\r\n\r\n        let emailOption = (\r\n            <div>\r\n                <div className=\"contact\">\r\n                    <div>\r\n                        <div className=\"contact-method\">Send Code Via Email</div>\r\n                        <div className=\"contact-detail\">{this.state.email}</div>\r\n                    </div>\r\n                    <div className=\"radio-container\">\r\n                        <Radio color=\"primary\" checked={this.state.selectedContactMethod === 'email'} onChange={this.handleChange} value=\"email\" />\r\n                    </div>\r\n                </div>\r\n                <Divider className=\"contact-divider\" />\r\n            </div>\r\n        );\r\n\r\n        let phoneOption = (\r\n            <div>\r\n                <div className=\"contact\">\r\n                    <div>\r\n                        <div className=\"contact-method\">Send Code Via SMS</div>\r\n                        <div className=\"contact-detail\">{this.state.phone}</div>\r\n                    </div>\r\n                    <div className=\"radio-container\">\r\n                        <Radio color=\"primary\" checked={this.state.selectedContactMethod === 'phone'} onChange={this.handleChange} value=\"phone\" />\r\n                    </div>\r\n                </div>\r\n                <Divider className=\"contact-divider\" />\r\n            </div>\r\n        );\r\n\r\n        return (\r\n            <div className=\"auth-page-container\">\r\n                <div className=\"auth-page\">\r\n                    <Typography className=\"auth-header\" color=\"primary\" variant=\"h4\">Pick Reset Method</Typography>\r\n                    <form className=\"auth-form\">\r\n                        <Paper elevation={1} className=\"find-account-icon-container\">\r\n                            <AccountCircle color=\"primary\" className=\"find-account-icon\" />\r\n                            <div>{this.state.email}</div>\r\n                        </Paper>\r\n                        <div className=\"auth-instructions desktop-only\">Select how you would like to recieve the code to reset your password.</div>\r\n                        <Divider className=\"contact-divider\" />\r\n                        {email && emailOption}\r\n                        {phone && phoneOption}\r\n                        <Button onClick={this.handleSubmit} className=\"auth-btn\" variant=\"contained\" color=\"primary\" size=\"medium\">Send Code</Button>\r\n                        <FormHelperText className={`auth-err ${this.displayFormError() ? \"\" : \"display-none\"}`} error={true}>{this.getFormErrorText()}</FormHelperText>\r\n                    </form>\r\n                    <div className=\"non-important-btns-container\">\r\n                        <Link className=\"no-underline\" to=\"/findaccount\">\r\n                            <Button className=\"find-email-btn non-important-btn\" color=\"primary\">Not You?</Button>\r\n                        </Link>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PickResetMethod;","import React, { Component, useContext } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\n\r\n\r\nimport qs from 'qs';\r\n\r\nimport * as userAPI from '../api/user';\r\n\r\nimport './EnterCode.css';\r\n\r\nenum EnterCodeStatusType {\r\n    NONE,\r\n    INVALID_PASSCODE,\r\n    CODE_EXPIRED,\r\n    TOO_MANY_ATTEMPTS,\r\n    INTERNAL_SERVER_ERROR,\r\n    RESENT_CODE\r\n}\r\n\r\ntype EnterCodeState = {\r\n    selectedContactMethod: string,\r\n    email: string,\r\n    phone: string,\r\n    submitIsTouched: boolean,\r\n    code: string,\r\n    enterCodeStatusType: EnterCodeStatusType\r\n}\r\n\r\ntype EnterCodeProps = {\r\n    location: any, // TODO: type\r\n    history: any, // TODO: type\r\n}\r\n\r\n\r\nclass EnterCode extends React.Component<EnterCodeProps, EnterCodeState> {\r\n\r\n    constructor(props: EnterCodeProps) {\r\n        super(props);\r\n\r\n        let selectedContactMethod: any = '';\r\n        let email: any = '';\r\n        let phone: any = '';\r\n\r\n        let qsParse: qs.ParsedQs = qs.parse(this.props.location.search, { ignoreQueryPrefix: true });\r\n\r\n        if ( qsParse ) {\r\n            selectedContactMethod = qsParse.selectedContactMethod;\r\n            email = qsParse.email; // Need email either way for back button\r\n            \r\n            if ( selectedContactMethod === 'phone' ) {\r\n                phone = qsParse.phone;\r\n            }\r\n        }\r\n\r\n        this.state = { selectedContactMethod, email, phone, submitIsTouched: false, code: '', enterCodeStatusType: EnterCodeStatusType.NONE };\r\n\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.handleCodeChange = this.handleCodeChange.bind(this);\r\n        this.resendCodeClicked = this.resendCodeClicked.bind(this);\r\n    }\r\n\r\n    handleCodeChange(e: any) {\r\n        const code: string = e.target.value;\r\n        this.setState({code});\r\n    }\r\n\r\n    getCodeHelperText(): string {\r\n        if ( this.displayCodeTextFieldError() ) {\r\n            return 'Code must be 8 digits';\r\n        }\r\n\r\n        const { selectedContactMethod} = this.state;\r\n        \r\n        return `Enter the 8 digit code sent to your ${selectedContactMethod}.`;\r\n    }\r\n\r\n    codeIsValid(): boolean {\r\n        return this.state.code.length === 8;\r\n    }\r\n\r\n    displayCodeTextFieldError(): boolean {\r\n        const { submitIsTouched, code } = this.state;\r\n\r\n        if ( !submitIsTouched ) {\r\n            return false\r\n        }\r\n\r\n        return !this.codeIsValid();\r\n    }\r\n      \r\n    async handleSubmit(e: any) {\r\n        this.setState({submitIsTouched: true});\r\n\r\n        if ( !this.codeIsValid() ) {\r\n            return;\r\n        }\r\n        \r\n        const { email, code, selectedContactMethod, phone } = this.state;\r\n\r\n        try {\r\n\r\n            await userAPI.checkResetCode(email, code);\r\n\r\n            this.setState({enterCodeStatusType: EnterCodeStatusType.NONE});\r\n\r\n            // TODO: should I just do history.back or something\r\n            if (selectedContactMethod === 'email') {\r\n                this.props.history.push(`/resetpassword?email=${email}&code=${code}`);\r\n            }\r\n            else {\r\n                this.props.history.push(`/resetpassword?email=${email}&code=${code}`);\r\n            }\r\n        }\r\n        catch(error) {\r\n            console.error(\"error\",error)\r\n\r\n            if ( error.response.status === 401 ) {\r\n                if ( error.response.data.message === 'Invalid email/passcode combination') {\r\n                    this.setState({enterCodeStatusType: EnterCodeStatusType.INVALID_PASSCODE});\r\n                }\r\n                else if ( error.response.data.message === 'Reset code has expired' ) {\r\n                    this.setState({enterCodeStatusType: EnterCodeStatusType.CODE_EXPIRED});\r\n                }\r\n                else if ( error.response.data.message === 'Too many failed attempts' ) {\r\n                    this.setState({enterCodeStatusType: EnterCodeStatusType.TOO_MANY_ATTEMPTS});\r\n                }\r\n            }\r\n            else { //500, 'The server encountered an unknown error.', 400, Email and/or resetCode not sent (shouldn't ever happen)\r\n                this.setState({enterCodeStatusType: EnterCodeStatusType.INTERNAL_SERVER_ERROR});\r\n            }\r\n        }\r\n    }\r\n\r\n    displayFormHelperText(): boolean {\r\n        return this.state.enterCodeStatusType !== EnterCodeStatusType.NONE;\r\n    }\r\n\r\n    getFormHelperText(): string {\r\n        const { enterCodeStatusType, selectedContactMethod, email, phone } = this.state;\r\n\r\n        if ( enterCodeStatusType === EnterCodeStatusType.INVALID_PASSCODE ) {\r\n            return 'Wrong code, try again.';\r\n        }\r\n        else if ( enterCodeStatusType === EnterCodeStatusType.CODE_EXPIRED ) {\r\n            return 'This code has expired.';\r\n        }\r\n        else if ( enterCodeStatusType === EnterCodeStatusType.TOO_MANY_ATTEMPTS ) {\r\n            return 'Too many failed attempts.';\r\n        }\r\n        else if ( enterCodeStatusType === EnterCodeStatusType.INTERNAL_SERVER_ERROR ) {\r\n            return 'Internal server error. Please refresh the page and try again.';\r\n        }\r\n        else if ( enterCodeStatusType === EnterCodeStatusType.RESENT_CODE) {\r\n            return `Another code has been sent to ${selectedContactMethod === 'email' ? email : phone}`;\r\n        }\r\n\r\n        return '';\r\n    }\r\n\r\n    formHelperTextIsError(): boolean {\r\n        return this.state.enterCodeStatusType !== EnterCodeStatusType.RESENT_CODE;\r\n    }\r\n\r\n    displayResendCodeLink(): boolean {\r\n        const enterCodeStatusType: EnterCodeStatusType = this.state.enterCodeStatusType;\r\n\r\n        return  enterCodeStatusType === EnterCodeStatusType.TOO_MANY_ATTEMPTS || enterCodeStatusType === EnterCodeStatusType.CODE_EXPIRED;\r\n    }\r\n\r\n    async resendCodeClicked(e: any) { // TODO: Type\r\n        const { email, selectedContactMethod } = this.state;\r\n\r\n        try {\r\n            await userAPI.sendResetCode(email, selectedContactMethod);\r\n\r\n            this.setState({enterCodeStatusType: EnterCodeStatusType.RESENT_CODE});   \r\n        }\r\n        catch (error) {\r\n            this.setState({ enterCodeStatusType: EnterCodeStatusType.INTERNAL_SERVER_ERROR });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { selectedContactMethod, phone, email } = this.state;\r\n        const contactDetail = selectedContactMethod === 'email' ? email : phone;\r\n        return (\r\n            <div className=\"auth-page-container\">\r\n                <div className=\"auth-page\">\r\n                    <Typography className=\"auth-header\" color=\"primary\" variant=\"h4\">Enter Security Code</Typography>\r\n                    <form className=\"auth-form\">\r\n                        <div className=\"auth-instructions desktop-only\">Please check your {selectedContactMethod} for the 8 digit code that was sent to {contactDetail}.</div>\r\n                        <TextField onChange={this.handleCodeChange} className=\"auth-txt-field\" label=\"########\" variant=\"filled\" helperText={this.getCodeHelperText()} error={this.displayCodeTextFieldError()}/>\r\n                        <Button onClick={ this.handleSubmit } className=\"auth-btn\" variant=\"contained\" color=\"primary\" size=\"medium\">Enter Code</Button>\r\n                        <FormHelperText className={`auth-err ${this.displayFormHelperText() ? \"\" : \"display-none\"}`} error={this.formHelperTextIsError()}>{this.getFormHelperText()}<span className={`resend-code ${this.displayResendCodeLink() ? \"\" : \"display-none\"}`} onClick={this.resendCodeClicked}>Resend Code?</span></FormHelperText>\r\n                    </form>\r\n                    <div className=\"non-important-btns-container\">\r\n                        <Link className=\"no-underline\" to={`/pickresetmethod?email=${email}&phone=${phone}`}>\r\n                            <Button className=\"enter-code-btn non-important-btn\" color=\"primary\">Try Another Way</Button>\r\n                        </Link>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default EnterCode;","import React, { Component, useContext } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { useLocation } from 'react-router-dom';\r\nimport { AuthContextConsumer } from '../contexts/authContext';\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\n\r\nimport DoneIcon from '@material-ui/icons/Done';\r\nimport CheckCircleOutlineIcon from '@material-ui/icons/CheckCircleOutline';\r\n\r\nimport qs from 'qs';\r\n\r\nimport * as userAPI from '../api/user';\r\n\r\n\r\nimport PasswordInput from './PasswordInput';\r\n\r\nimport './ResetPassword.css';\r\n\r\ntype ResetPasswordState = {\r\n    resetPasswordFailureType: ResetPasswordFailureType,\r\n    code: string,\r\n    email: string,\r\n    password: string,\r\n    submitButtonTouched: boolean,\r\n    passwordChangeSuccess: boolean\r\n}\r\ntype ResetPasswordProps = {\r\n    location: any, // TODO: TYPE\r\n    history: any // TODO: Type\r\n}\r\n\r\nenum ResetPasswordFailureType {\r\n    PASSWORD_EXPIRED,\r\n    INTERNAL_SERVER_ERROR,\r\n    NONE\r\n}\r\n\r\nclass ResetPassword extends React.Component<ResetPasswordProps, ResetPasswordState> {\r\n\r\n    constructor(props: ResetPasswordProps) {\r\n        super(props);\r\n\r\n        let qsParse: qs.ParsedQs = qs.parse(this.props.location.search, { ignoreQueryPrefix: true });\r\n\r\n        let code: any = '';\r\n        let email: any = '';\r\n\r\n        if ( qsParse ) {\r\n            code = qsParse.code;\r\n            email = qsParse.email; // Need email either way for back button            \r\n        }\r\n\r\n        this.state = {\r\n            code,\r\n            email,\r\n            password: '',\r\n            resetPasswordFailureType: ResetPasswordFailureType.NONE,\r\n            submitButtonTouched: false,\r\n            passwordChangeSuccess: false \r\n        };\r\n\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.handlePasswordChange = this.handlePasswordChange.bind(this);\r\n    }\r\n\r\n    handlePasswordChange(e: any) {\r\n        const password = e.target.value;\r\n        this.setState({password});\r\n    }\r\n\r\n    displayPasswordError(): boolean {\r\n        return !this.passwordIsValid() && this.state.submitButtonTouched;\r\n    }\r\n\r\n    passwordHasCorrectLength(): boolean {\r\n        const { password } = this.state;\r\n\r\n        return password.length >= 8 && password.length <= 32;\r\n    }\r\n    \r\n    // TODO: Fix this\r\n    passwordHasCorrectCharacters(): boolean {\r\n        const { password } = this.state;\r\n\r\n        const regex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[^\\da-zA-Z]).{8,32}$/\r\n\r\n        return regex.test(password);\r\n\r\n    }\r\n\r\n    passwordIsValid(): boolean {\r\n        return this.passwordHasCorrectCharacters() && this.passwordHasCorrectLength();\r\n    }\r\n\r\n    getPasswordHelperText(): string {\r\n        const { submitButtonTouched } = this.state;\r\n\r\n        if ( !this.passwordHasCorrectLength() && submitButtonTouched ) {\r\n            return 'Enter between 8 and 32 characters';\r\n        }\r\n        else if ( !this.passwordHasCorrectCharacters() && submitButtonTouched ) {\r\n            return 'Include a letter, number, and special character';\r\n        }\r\n    \r\n        return 'Enter your new password';\r\n    }\r\n\r\n    displayFormError(): boolean {\r\n        return this.state.resetPasswordFailureType !== ResetPasswordFailureType.NONE;\r\n    }\r\n\r\n    getFormErrorText(): string {\r\n        const { resetPasswordFailureType } = this.state;\r\n\r\n        if ( resetPasswordFailureType === ResetPasswordFailureType.PASSWORD_EXPIRED ) {\r\n            return 'This reset code has expired.';\r\n        }\r\n        else if ( resetPasswordFailureType === ResetPasswordFailureType.INTERNAL_SERVER_ERROR ) {\r\n            return 'Internal server error. Please refresh the page and try again.';\r\n        }\r\n\r\n        return '';\r\n    }\r\n      \r\n    async handleSubmit(callback: any) { // TODO: Rename this\r\n        const { email, password, code } = this.state;\r\n\r\n        this.setState({submitButtonTouched: true});\r\n\r\n        if ( !this.passwordIsValid() ) {\r\n            return;\r\n        }\r\n\r\n        try {\r\n            await userAPI.changePassword(email, password, code);\r\n            this.setState({resetPasswordFailureType: ResetPasswordFailureType.NONE, passwordChangeSuccess: true});\r\n   \r\n            callback();\r\n\r\n            setTimeout( () => {\r\n                this.props.history.push('/features/schedule');\r\n            }, 500);\r\n        }\r\n        catch ( error ) {\r\n            if ( error.response.status === 401 && error.response.data.message === 'Reset code has expired' ) {\r\n                this.setState({resetPasswordFailureType: ResetPasswordFailureType.PASSWORD_EXPIRED});\r\n                console.log('error.response.data',error.response.data);\r\n            }\r\n            else {\r\n                this.setState({resetPasswordFailureType: ResetPasswordFailureType.INTERNAL_SERVER_ERROR});\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n        const {passwordChangeSuccess} = this.state;\r\n\r\n        return (\r\n            <div className=\"auth-page-container\">\r\n                <div className=\"auth-page\">\r\n                    <Typography className=\"auth-header\" color=\"primary\" variant=\"h4\">Reset Password</Typography>\r\n                    <form className=\"auth-form\">\r\n                        <div className=\"auth-instructions desktop-only\">Enter a new password between 8 and 32 characters. Include at least one uppercase letter, lowercase letter, number, and special character. </div>\r\n                        <PasswordInput onChange={this.handlePasswordChange} inputProps={{ maxLength: 32 }} className=\"auth-txt-field\" error={this.displayPasswordError()} helperText={this.getPasswordHelperText()} label=\"New Password\"/>\r\n                        <AuthContextConsumer>\r\n                        {context => (\r\n                            <Button onClick={ e => this.handleSubmit(context.login) } className=\"auth-btn\" variant=\"contained\" color=\"primary\" size=\"medium\">Change Password</Button>\r\n                        )}\r\n                        </AuthContextConsumer>\r\n                        <FormHelperText className={`auth-err ${this.displayFormError() ? \"\" : \"display-none\"}`} error={this.displayFormError()}>{this.getFormErrorText()}</FormHelperText>\r\n                        <div className={`change-pw-success ${passwordChangeSuccess ? \"\" : \"display-none\"}`}>\r\n                            <div className=\"change-pw-success-txt\">Password Changed</div>\r\n                            <CheckCircleOutlineIcon color=\"primary\"/>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ResetPassword;","import React, { Component } from 'react';\r\nimport { Route, Redirect  } from 'react-router-dom';\r\n\r\nimport { AuthContextConsumer } from '../contexts/authContext';\r\n\r\nimport Login from './Login';\r\n\r\ntype PrivateRouteState = {}\r\ntype PrivateRouteProps = { options?: any, component?: any, children?: any, path?: any }\r\n\r\nclass PrivateRoute extends React.Component<PrivateRouteProps, PrivateRouteState> {\r\n    constructor(props: PrivateRouteProps) {\r\n      super(props);\r\n    }\r\n\r\n    render() {\r\n      const { options, component, children } = this.props;\r\n\r\n      return (\r\n        <AuthContextConsumer>\r\n          {\r\n\r\n          (context) => { return context.isLoggedIn ? (\r\n            <Route path={this.props.path} {...options} component={ context.isLoggedIn ? component : Login}>{children}</Route> )\r\n            : (<Redirect to=\"/login\"/>)\r\n          }\r\n          \r\n          }\r\n        </AuthContextConsumer>\r\n      );\r\n    }\r\n}\r\n\r\nexport default PrivateRoute;","import React, { createContext, useState, useContext } from 'react';\r\nimport { Route, BrowserRouter as Router, Switch } from 'react-router-dom';\r\n\r\nimport ContactSettings from './components/ContactSettings';\r\nimport Main from './components/Main';\r\nimport Medicine from './components/Medicine';\r\nimport Alarms from './components/Alarms';\r\nimport Schedule from './components/Schedule';\r\nimport AccountSettings from './components/AccountSettings';\r\nimport Splash from './components/Splash';\r\nimport Login from './components/Login';\r\nimport Register from './components/Register';\r\nimport FindAccount from './components/FindAccount';\r\nimport PickResetMethod from './components/PickResetMethod';\r\nimport EnterCode from './components/EnterCode';\r\nimport ResetPassword from './components/ResetPassword';\r\n\r\nimport { AuthContextConsumer } from './contexts/authContext';\r\n\r\nimport PrivateRoute from './components/PrivateRoute';\r\n\r\nimport './App.css';\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <Switch>\r\n        <Route exact path=\"/register\" component={Register} />\r\n        <Route exact path=\"/login\" component={Login} />\r\n        <Route exact path=\"/findaccount\" component={FindAccount} />\r\n        <Route exact path=\"/pickresetmethod\" component={PickResetMethod} />\r\n        <Route exact path=\"/entercode\" component={EnterCode} />\r\n        <Route exact path=\"/resetpassword\" component={ResetPassword} />\r\n        <Route exact path=\"/\" component={Splash} />\r\n        <PrivateRoute path=\"/features\">\r\n          <Main>\r\n            <Route path=\"/features/medicine\" component={Medicine} />\r\n            <Route path=\"/features/contactsettings\" component={ContactSettings} />\r\n            <Route path=\"/features/alarms\" component={Alarms} />\r\n            <Route path=\"/features/schedule\" component={Schedule} />\r\n            <Route path=\"/features/accountsettings\" component={AccountSettings} />\r\n          </Main>\r\n        </PrivateRoute>\r\n      </Switch>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { createMuiTheme, responsiveFontSizes } from '@material-ui/core/styles';\r\nimport orange from '@material-ui/core/colors/orange';\r\nimport teal from '@material-ui/core/colors/teal';\r\n\r\nlet theme = createMuiTheme({\r\n  palette: {\r\n    primary: teal,\r\n    secondary: orange\r\n  },\r\n  status: {\r\n      danger: 'red'\r\n  }\r\n});\r\n\r\ntheme = responsiveFontSizes(theme);\r\n\r\nexport default theme;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { ThemeProvider } from '@material-ui/core/styles';\r\n\r\nimport { AuthContextProvider } from \"./contexts/authContext\";\r\n\r\nimport theme from './theme';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <AuthContextProvider>\r\n      <ThemeProvider theme={theme}>\r\n        <App />\r\n      </ThemeProvider>\r\n    </AuthContextProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}