{"version":3,"sources":["models/Units.tsx","components/ContactSettings.tsx","components/Header.tsx","components/Main.tsx","components/AddMedicineDialog.tsx","components/MedicineListItem.tsx","components/MedicineList.tsx","components/Medicine.tsx","components/Alarms.tsx","components/Schedule.tsx","api/auth.tsx","contexts/authContext.js","components/AccountSettings.tsx","components/Splash.tsx","components/Login.tsx","components/PasswordInput.tsx","components/FindAccount.tsx","components/Register.tsx","api/user.tsx","components/PickResetMethod.tsx","components/EnterCode.tsx","components/ResetPassword.tsx","components/PrivateRoute.tsx","App.tsx","theme.js","index.tsx"],"names":["Units","ContactSettings","props","React","Component","Header","className","AppBar","position","Toolbar","Typography","variant","to","activeClassName","Main","this","children","AddMedicineDialog","medicineList","id","name","state","medicine","ammount","units","MG","time","startDate","endDate","handleMedicineChange","bind","handleMedicineAmmountChange","handleMedicineUnitsChange","handleTimeChange","handleStartDateChange","handleEndDateChange","e","Number","target","value","setState","date","TextField","onChange","label","error","helperText","type","InputProps","inputProps","min","max","utils","LuxonUtils","TimePicker","inputVariant","format","margin","endAdornment","InputAdornment","color","DatePicker","Button","onClick","size","handleSubmit","MedicineListItem","IconButton","aria-label","MedicineList","medListItems","i","length","push","Medicine","dialogOpen","openDialog","console","log","Fab","withStyles","container","alignItems","Alarms","Schedule","register","email","password","axios","post","login","hasLoginCookie","Cookies","get","createContext","Provider","Consumer","AuthContextProvider","isLoggedIn","auth","logout","AccountSettings","callback","delete","history","context","Splash","LoginFailureType","PasswordInput","togglePasswordMask","prevState","passwordIsMasked","classes","getVisibilityIcon","SearchAccountFailureType","Login","submitIsTouched","loginFailureType","NONE","handleEmailChange","handlePasswordChange","BAD_EMAIL_PASSWORD","INTERNAL_SERVER_ERROR","response","status","data","message","ACCOUNT_LOCKED","emailHasError","maxLength","passwordHasError","FormHelperText","hasFormError","getFormErrorText","Register","passwordIsTouched","emailIsTaken","internalServerError","test","isValidEmail","passwordIsValid","passwordHasCorrectLength","getEmailHelperText","getPasswordHelperText","hasInternalServerError","sendResetCode","selectedContactMethod","checkResetCode","resetCode","params","changePassword","PickResetMethodFailureType","FindAccount","contact","searchAccountFailureType","handleContactChange","account","contactInformation","contactInfo","phone","ACCOUNT_NOT_FOUND","contactHasError","displayFormError","EnterCodeStatusType","PickResetMethod","qs","parse","location","search","ignoreQueryPrefix","pickResetMethodFailureType","handleChange","userAPI","emailOption","Radio","checked","Divider","phoneOption","Paper","elevation","ResetPasswordFailureType","EnterCode","qsParse","code","enterCodeStatusType","handleCodeChange","resendCodeClicked","displayCodeTextFieldError","codeIsValid","INVALID_PASSCODE","CODE_EXPIRED","TOO_MANY_ATTEMPTS","RESENT_CODE","contactDetail","getCodeHelperText","displayFormHelperText","formHelperTextIsError","getFormHelperText","displayResendCodeLink","ResetPassword","resetPasswordFailureType","submitButtonTouched","passwordChangeSuccess","passwordHasCorrectCharacters","PASSWORD_EXPIRED","setTimeout","displayPasswordError","PrivateRoute","options","component","path","App","exact","theme","createMuiTheme","palette","primary","teal","secondary","orange","danger","responsiveFontSizes","ReactDOM","render","ThemeProvider","document","getElementById"],"mappings":"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","file":"static/js/main.d95bf575.chunk.js","sourcesContent":["export enum Units {\r\n    MG = \"mg\",\r\n    CC = 'cc',\r\n    CAPSULES = 'capsules',\r\n    TABLET = '' \r\n}\r\n\r\nexport default Units;","import React  from 'react';\r\n\r\ntype ContactSettingsState = {\r\n\r\n}\r\n\r\ntype ContactSettingsProps = {\r\n\r\n}\r\n\r\nclass ContactSettings extends React.Component<ContactSettingsProps, ContactSettingsState> {\r\n    constructor(props: ContactSettingsProps) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <h1>ContactSettings</h1>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ContactSettings;","import React from 'react';\r\n\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport AccountCircle from '@material-ui/icons/AccountCircle';\r\nimport AccessAlarmIcon from '@material-ui/icons/AccessAlarm';\r\nimport EventIcon from '@material-ui/icons/Event';\r\nimport SettingsPhoneIcon from '@material-ui/icons/SettingsPhone';\r\nimport LocalHospitalIcon from '@material-ui/icons/LocalHospital';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nimport './Header.css';\r\n\r\ntype HeaderState = {}\r\n\r\ntype HeaderProps = {}\r\n\r\nclass Header extends React.Component<HeaderProps, HeaderState> {\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"app-bar-container\">\r\n                <AppBar position=\"static\">\r\n                    <Toolbar>\r\n                        <Typography variant=\"h6\" className=\"title\"></Typography>\r\n                        <nav>\r\n                            <NavLink className=\"icon-container\" to=\"/features/medicine\" activeClassName=\"icon-container-active\">\r\n                                <LocalHospitalIcon className=\"icon\" />\r\n                                <div className=\"icon-description\">Medicines</div>\r\n                            </NavLink>\r\n                            <NavLink className=\"icon-container\" to=\"/features/contactsettings\" activeClassName=\"icon-container-active\">\r\n                                <SettingsPhoneIcon className=\"icon\" />\r\n                                <div className=\"icon-description\">Calls</div>\r\n                            </NavLink>\r\n                            <NavLink className=\"icon-container\" to=\"/features/alarms\" activeClassName=\"icon-container-active\">\r\n                                <AccessAlarmIcon className=\"icon\" />\r\n                                <div className=\"icon-description\">Alarms</div>\r\n                            </NavLink>\r\n                            <NavLink className=\"icon-container\" to=\"/features/schedule\" activeClassName=\"icon-container-active\">\r\n                                <EventIcon className=\"icon\" />\r\n                                <div className=\"icon-description\">Schedule</div>\r\n                            </NavLink>\r\n                            <NavLink className=\"icon-container\" to=\"/features/accountsettings\" activeClassName=\"icon-container-active\">\r\n                                <AccountCircle className=\"icon\" />\r\n                                <div className=\"icon-description\">Account</div>\r\n                            </NavLink>\r\n                        </nav>\r\n                    </Toolbar>\r\n                </AppBar>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\n\r\n\r\nimport Header from './Header';\r\n\r\ninterface MainProps {\r\n  children: any; /* ReactChild | ReactChildren; */\r\n}\r\n\r\ninterface MainState {}\r\n\r\nclass Main extends React.Component <MainProps, MainState > {\r\n\r\n  render() {\r\n    return (\r\n      /*\r\n      TODO: Add to below div\r\ndisplay: flex;\r\nflex-direction: column;\r\nheight: 100%;\r\n      */\r\n      <div>\r\n        <Header/>\r\n        <main>{this.props.children}</main> \r\n      </div>\r\n    );\r\n    // TODO: add flex: 1 to main\r\n  }\r\n}\r\n\r\nexport default Main;","import React from 'react';\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\n//import Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport LuxonUtils from '@date-io/luxon';\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\n\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport Medicine from '../models/Medicine';\r\nimport Units from '../models/Units';\r\n\r\nimport {\r\n  MuiPickersUtilsProvider,\r\n  TimePicker,\r\n  DatePicker\r\n} from '@material-ui/pickers';\r\n\r\nimport AccessAlarmIcon from '@material-ui/icons/AccessAlarm';\r\nimport EventIcon from '@material-ui/icons/Event';\r\n\r\nimport { InputAdornment } from '@material-ui/core';\r\n\r\nimport './AddMedicineDialog.css';\r\n\r\ntype AddMedicineDialogState = {\r\n    medicine: Medicine | null,\r\n    ammount: number,\r\n    units: Units | null,\r\n    time: Date | null\r\n    startDate: Date | null;\r\n    endDate: Date | null;\r\n}\r\n\r\n\r\ntype AddMedicineDialogProps = {}\r\n\r\nclass AddMedicineDialog extends React.Component<AddMedicineDialogProps, AddMedicineDialogState> {\r\n\r\n    medicineList: Array<Medicine> = [\r\n        {\r\n            id: '123',\r\n            name: 'Tylenol'\r\n        },\r\n        {\r\n            id: '234',\r\n            name: 'Advil'\r\n        }\r\n    ]\r\n\r\n    constructor(props: AddMedicineDialogProps) {\r\n        super(props);\r\n\r\n        this.state = { medicine: this.medicineList[0], ammount: 0, units: Units.MG, time: null, startDate: null, endDate: null }\r\n\r\n        this.handleMedicineChange = this.handleMedicineChange.bind(this);\r\n        this.handleMedicineAmmountChange = this.handleMedicineAmmountChange.bind(this);\r\n        this.handleMedicineUnitsChange = this.handleMedicineUnitsChange.bind(this);\r\n        this.handleTimeChange = this.handleTimeChange.bind(this);\r\n        this.handleStartDateChange = this.handleStartDateChange.bind(this);\r\n        this.handleEndDateChange = this.handleEndDateChange.bind(this);\r\n    }\r\n\r\n    handleMedicineChange() {}\r\n\r\n    handleMedicineAmmountChange(e: any) {\r\n        const ammount: number = Number(e.target.value);\r\n        this.setState({ammount});\r\n    }\r\n    \r\n    handleMedicineUnitsChange() {}\r\n    \r\n    handleTimeChange(time: Date | null) {\r\n        this.setState({time});\r\n    }\r\n\r\n    handleStartDateChange(date: Date | null) {\r\n        this.setState({startDate: date});\r\n    }\r\n\r\n    handleEndDateChange(date: Date | null) {\r\n        this.setState({endDate: date});\r\n    }\r\n\r\n    handleSubmit(e: any) {\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        const { time, startDate, endDate } = this.state;\r\n\r\n        // TODO: Async autocomplete for medicine name\r\n        //https://codesandbox.io/s/wj0r6?file=/demo.tsx\r\n\r\n        return (\r\n            <div className=\"grayout\">\r\n                <div className=\"add-medicine-dialog\">\r\n                    <div className=\"dialog-header\">\r\n                        <Typography className=\"dialog-title\" variant=\"h4\">Add Medicine</Typography>\r\n                    </div>\r\n                    <div className=\"dialog-body\">\r\n                        <div className=\"dialog-form\">\r\n                            <TextField onChange={this.handleMedicineChange} className=\"dialog-txt-field\" label=\"Medicine Name\" variant=\"filled\" error={false} helperText=\"Enter the medicine name\" />\r\n                            <div className=\"medicine-amt-container\">\r\n                                <TextField type=\"number\" InputProps={{ inputProps: { min: 0, max: 9999 } }} onChange={this.handleMedicineAmmountChange} className=\"medicine-amt\" label=\"Medicine Ammount\" variant=\"filled\" error={false} helperText=\"Enter the medcine ammount\" />\r\n                                <TextField onChange={this.handleMedicineUnitsChange} className=\"medicine-units\" label=\"Units\" variant=\"filled\" error={false}/>\r\n                            </div>\r\n                            <TextField className=\"dialog-txt-field\" label=\"Frequency\" variant=\"filled\" error={false} helperText=\"How often do you take this medicine?\" />\r\n                            \r\n                            <MuiPickersUtilsProvider utils={LuxonUtils}>\r\n                                <TimePicker\r\n                                    className=\"dialog-picker-field\"\r\n                                    inputVariant=\"filled\"\r\n                                    format=\"h:mm a\"\r\n                                    value={time}\r\n                                    margin=\"normal\"\r\n                                    label=\"Time\"\r\n                                    onChange={this.handleTimeChange}\r\n                                    helperText=\"What time do you take this medicine?\"\r\n                                    InputProps={{\r\n                                        endAdornment: (\r\n                                        <InputAdornment position=\"end\">\r\n                                            <AccessAlarmIcon color=\"primary\"/>\r\n                                        </InputAdornment>\r\n                                        ),\r\n                                    }}\r\n                                />\r\n\r\n                                <DatePicker\r\n                                    className=\"dialog-picker-field\"\r\n                                    inputVariant=\"filled\"\r\n                                    format=\"MM/dd/yyyy\"\r\n                                    value={startDate}\r\n                                    margin=\"normal\"\r\n                                    label=\"Start Date\"\r\n                                    onChange={this.handleStartDateChange}\r\n                                    helperText=\"What's the first day you take this medicine?\"\r\n                                    InputProps={{\r\n                                        endAdornment: (\r\n                                        <InputAdornment position=\"end\">\r\n                                            <EventIcon color=\"primary\"/>\r\n                                        </InputAdornment>\r\n                                        ),\r\n                                    }}\r\n                                />\r\n\r\n                                <DatePicker\r\n                                    className=\"dialog-picker-field\"\r\n                                    inputVariant=\"filled\"\r\n                                    format=\"MM/dd/yyyy\"\r\n                                    value={endDate}\r\n                                    margin=\"normal\"\r\n                                    label=\"End Date\"\r\n                                    onChange={this.handleEndDateChange}\r\n                                    helperText=\"What's the last day you take this medicine?\"\r\n                                    InputProps={{\r\n                                        endAdornment: (\r\n                                        <InputAdornment position=\"end\">\r\n                                            <EventIcon color=\"primary\"/>\r\n                                        </InputAdornment>\r\n                                        ),\r\n                                    }}\r\n                                />\r\n\r\n                            </MuiPickersUtilsProvider>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"dialog-actions\">\r\n                        <Button color=\"primary\" className=\"dialog-btn\" onClick={ () => {} } variant=\"contained\" size=\"medium\">Cancel</Button>\r\n                        <Button color=\"primary\" className=\"dialog-btn\" onClick={ this.handleSubmit } variant=\"contained\" size=\"medium\">Add</Button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AddMedicineDialog;","import React from 'react';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport './MedicineListItem.css';\r\n\r\ntype MedicineListItemState = {\r\n\r\n}\r\n\r\ntype MedicineListItemProps = {\r\n    medicine: string\r\n}\r\n\r\n\r\n\r\nfunction MedicineListItem(props: MedicineListItemProps) {\r\n    return (\r\n        <div className=\"med-list-item\">\r\n            <div>\r\n                <div className=\"med-name-txt\">{props.medicine}</div>\r\n            </div>\r\n            <div className=\"med-btns-container\">\r\n                <div className=\"med-icon-btn-container\">\r\n                    <IconButton className=\"med-icon-btn\" color=\"primary\" aria-label=\"add an alarm\">\r\n                        <DeleteIcon className=\"med-icon\" color=\"primary\" />\r\n                    </IconButton>\r\n                </div>\r\n                <div className=\"med-icon-btn-container\">\r\n                    <IconButton className=\"med-icon-btn\" color=\"primary\" aria-label=\"add an alarm\">\r\n                        <EditIcon className=\"med-icon\" color=\"primary\" />\r\n                    </IconButton>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n// class MedicineListItem extends React.Component<MedicineListItemProps, MedicineListItemState> {\r\n//     constructor(props: MedicineListItemProps) {\r\n//         super(props);\r\n//     }\r\n\r\n//     render() {\r\n//         return (\r\n//             <div className=\"med-list-item\">\r\n//                 <div>\r\n//                     <div className=\"med-name-txt\">{this.props.medicine}</div>\r\n//                 </div>\r\n//                 <div className=\"med-btns-container\">\r\n//                     <div className=\"med-icon-btn-container\">\r\n//                         <IconButton className=\"med-icon-btn\" color=\"primary\" aria-label=\"add an alarm\">\r\n//                             <DeleteIcon className=\"med-icon\" color=\"primary\" />\r\n//                         </IconButton>\r\n//                     </div>\r\n//                     <div className=\"med-icon-btn-container\">\r\n//                         <IconButton className=\"med-icon-btn\" color=\"primary\" aria-label=\"add an alarm\">\r\n//                             <EditIcon className=\"med-icon\" color=\"primary\" />\r\n//                         </IconButton>\r\n//                     </div>\r\n//                 </div>\r\n//             </div>\r\n\r\n//         );\r\n//     }\r\n// }\r\n\r\nexport default MedicineListItem;","import React from 'react';\r\n\r\nimport MedicineListItem from './MedicineListItem';\r\n\r\nimport './MedicineList.css';\r\n\r\ntype MedicineListState = {\r\n\r\n}\r\n\r\ntype MedicineListProps = {\r\n    medicineList: Array<string>\r\n}\r\n\r\nclass MedicineList extends React.Component<MedicineListProps, MedicineListState> {\r\n    constructor(props: MedicineListProps) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n\r\n        let medListItems = [];\r\n\r\n        for (let i = 0; i < this.props.medicineList.length; i++) {\r\n            medListItems.push(<MedicineListItem medicine={this.props.medicineList[i]}/>);\r\n        }\r\n\r\n        return (\r\n            <div className=\"med-list\">\r\n                {medListItems}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MedicineList;","import React from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport AddIcon from '@material-ui/icons/Add';\r\n\r\nimport AddMedicineDialog from './AddMedicineDialog';\r\n\r\nimport MedicineList from './MedicineList';\r\n\r\n\r\n\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\n\r\nimport './Medicine.css';\r\n\r\nconst styles = {\r\n    container: {\r\n      alignItems: \"center\"\r\n    }\r\n  };\r\n  \r\n\r\n\r\n\r\ntype MedicineState = {\r\n    medicineList: Array<string>,\r\n    dialogOpen: boolean\r\n}\r\n\r\ntype MedicineProps = {\r\n\r\n}\r\n\r\n/*\r\nhttps://material-ui.com/components/dialogs/ Responsive dialog\r\n*/\r\n\r\n\r\nclass Medicine extends React.Component<MedicineProps, MedicineState> {\r\n    constructor(props: MedicineProps) {\r\n        super(props);\r\n\r\n        this.state = { medicineList: ['Hydroxychloroquine', 'Regeneron', 'Vitamin C'], dialogOpen: false };\r\n\r\n        this.openDialog = this.openDialog.bind(this);\r\n    }\r\n\r\n    openDialog() {\r\n        console.log(\"opened dialog\");\r\n        this.setState({dialogOpen: true});\r\n    }\r\n\r\n    render() {\r\n        const { dialogOpen } = this.state;\r\n        \r\n        function dialogComponent() {\r\n            if (dialogOpen) {\r\n                console.log(\"true\")\r\n                return (\r\n                    <AddMedicineDialog/>\r\n                )\r\n            }\r\n            console.log(\"false\")\r\n            return (null);\r\n        }\r\n\r\n        //const matches = useMediaQuery('(min-width:600px)');\r\n\r\n        return (\r\n            <div className=\"page-container\">\r\n                <div className=\"page\">\r\n                    {dialogComponent()}\r\n                    <Typography className=\"page-header\" color=\"primary\" variant=\"h3\">My Medicine</Typography>\r\n                    \r\n                    <MedicineList medicineList={this.state.medicineList} />\r\n\r\n                    <Fab onClick={this.openDialog} className=\"add-med\" size=\"medium\"  aria-label=\"Add Medicine\" >\r\n                        <AddIcon color=\"primary\" />\r\n                    </Fab>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(Medicine);","import React  from 'react';\r\n\r\ntype AlarmsState = {\r\n  \r\n}\r\n\r\ntype AlarmsProps = {\r\n\r\n}\r\n\r\nclass Alarms extends React.Component<{}, AlarmsState> {\r\n    constructor(props: AlarmsProps) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <h1>Alarms</h1>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Alarms;","import React from 'react';\r\n\r\ntype ScheduleState = {}\r\n\r\ntype ScheduleProps = {}\r\n\r\nclass Schedule extends React.Component<ScheduleProps, ScheduleState> {\r\n    constructor(props: ScheduleProps) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <h1>Schedule</h1>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Schedule;","// TODO: Should I rename this?\r\n\r\nimport axios from 'axios';\r\n\r\nimport Cookies from 'universal-cookie';\r\n\r\n\r\n// TODO: Return type\r\nexport const register = (email: string, password: string) => {\r\n    return axios.post('/api/users', {\r\n        email, password\r\n    });\r\n}\r\n\r\nexport const login = (email: string, password: string) => {\r\n    return axios.post('/api/users/login', {\r\n        email, password\r\n    });\r\n}\r\n\r\nexport const logout = () => {\r\n    return axios.delete('/api/users/logout');\r\n}\r\n\r\nexport const hasLoginCookie = (): boolean => {\r\n    const cookies: Cookies = new Cookies();\r\n    return cookies.get('jwt') ? true : false;\r\n}","import React, { Component } from \"react\";\r\nimport * as auth from '../api/auth';\r\n\r\nconst { Provider, Consumer } = React.createContext();\r\n\r\nclass AuthContextProvider extends Component {\r\n  state = {\r\n    isLoggedIn: auth.hasLoginCookie()\r\n  };\r\n\r\n  login = () => {\r\n    this.setState({ isLoggedIn: true})\r\n  };\r\n\r\n  logout = () => {\r\n    this.setState({ isLoggedIn: false})\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Provider value={{ isLoggedIn: this.state.isLoggedIn, login: this.login, logout: this.logout }}>\r\n        {this.props.children}\r\n      </Provider>\r\n    );\r\n  }\r\n}\r\n\r\nexport { AuthContextProvider, Consumer as AuthContextConsumer };\r\n","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\n\r\n\r\nimport * as auth from '../api/auth';\r\n\r\n\r\nimport { AuthContextConsumer } from '../contexts/authContext';\r\n\r\ntype AccountSettingsState = {}\r\n\r\ntype AccountSettingsProps = {\r\n    history: any;\r\n}\r\n\r\nclass AccountSettings extends React.Component<AccountSettingsProps, AccountSettingsState> {\r\n    constructor(props: AccountSettingsProps) {\r\n        super(props);\r\n    }\r\n\r\n    handleSubmit(callback: any) {\r\n        try {\r\n            auth.logout();\r\n\r\n            callback();\r\n\r\n            this.props.history.push('/login');\r\n        }\r\n        catch(error) {\r\n            console.log('error',error)\r\n            \r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>Account Settings</h1>\r\n\r\n                <AuthContextConsumer>\r\n                {context => (\r\n                    <Button onClick={ e => this.handleSubmit(context.logout)} className=\"auth-btn\" variant=\"contained\" color=\"primary\" size=\"medium\">Logout</Button>\r\n                )}\r\n                </AuthContextConsumer>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AccountSettings;","import './Splash.css';\r\n\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport { Link } from 'react-router-dom';\r\n\r\n// TODO: move typography font-weight: 400 to theme\r\nfunction Splash() {\r\n    return (\r\n      <div className=\"landing-page-container\">\r\n        <div className=\"info-box\">\r\n          <Typography className=\"splash-header\" color=\"primary\" variant=\"h1\">RoboNurse</Typography>\r\n          <div className=\"description\">Never forget to take your medicines again with our medicine reminder calls.</div>\r\n          <Link className=\"no-underline\" to=\"/features/medicine\">\r\n            <Button variant=\"contained\" color=\"primary\" className=\"start-btn\">Get Started</Button>\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  export default Splash;","import React from 'react';\r\nimport { Link, Redirect } from 'react-router-dom';\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\n\r\nimport PasswordInput from './PasswordInput';\r\n\r\nimport * as auth from '../api/auth';\r\n\r\nimport { AuthContextConsumer } from '../contexts/authContext';\r\n\r\n\r\nimport './Login.css';\r\n\r\nenum LoginFailureType {\r\n    BAD_EMAIL_PASSWORD,\r\n    INTERNAL_SERVER_ERROR,\r\n    ACCOUNT_LOCKED,\r\n    NONE\r\n}\r\n\r\ntype LoginState = {\r\n    email: string,\r\n    password: string,\r\n    submitIsTouched: boolean,\r\n    loginFailureType: LoginFailureType\r\n}\r\n\r\ntype LoginProps = {\r\n    history: any // TODO: Fix this type\r\n}\r\n\r\nclass Login extends React.Component<LoginProps, LoginState> {\r\n    constructor(props: LoginProps) {\r\n        super(props);\r\n\r\n        this.state = { email: '', password: '', submitIsTouched: false, loginFailureType: LoginFailureType.NONE };\r\n        \r\n        this.handleEmailChange = this.handleEmailChange.bind(this);\r\n        this.handlePasswordChange = this.handlePasswordChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this); \r\n    }\r\n\r\n    handleEmailChange(e: any) {\r\n        const email = e.target.value;\r\n        this.setState({email});\r\n    }\r\n\r\n    emailHasError(): boolean {\r\n        const { email, submitIsTouched } = this.state;\r\n        return email.length === 0 && submitIsTouched;\r\n    }\r\n    \r\n    handlePasswordChange(e: any) {\r\n        const password = e.target.value;\r\n        this.setState({password});\r\n    }\r\n\r\n    passwordHasError(): boolean {\r\n        const { password, submitIsTouched } = this.state;\r\n        return password.length === 0 && submitIsTouched;\r\n    }\r\n\r\n    hasFormError(): boolean {\r\n        return this.state.loginFailureType !== LoginFailureType.NONE;\r\n    }\r\n\r\n    getFormErrorText() {\r\n        if (this.state.loginFailureType === LoginFailureType.BAD_EMAIL_PASSWORD) {\r\n            return 'The password you’ve entered is incorrect.';\r\n        }\r\n        else if ( this.state.loginFailureType === LoginFailureType.INTERNAL_SERVER_ERROR ) {\r\n            return 'Uh-oh! A problem occured. Please refresh the page and try again.';\r\n        }\r\n\r\n        return '';\r\n    }\r\n\r\n    async handleSubmit(callback: any) {\r\n        const { email, password } = this.state;\r\n\r\n        this.setState({submitIsTouched: true, loginFailureType: LoginFailureType.NONE});\r\n\r\n        if ( email.length === 0 || password.length === 0 ) {\r\n            return;\r\n        }\r\n\r\n        try {\r\n            await auth.login(email,password);\r\n            \r\n            callback();\r\n            \r\n            this.props.history.push('/features/schedule');\r\n        }\r\n        catch ( error ) {\r\n            if ( error.response.status === 401 ) {\r\n                if ( error.response.data.message === 'Email or password is incorrect' ) { // Keep text same as client\r\n                    this.setState({loginFailureType: LoginFailureType.BAD_EMAIL_PASSWORD});\r\n                }\r\n                else if ( error.response.data.message === 'Account locked' ) { // Keep text same as server\r\n                    this.setState({loginFailureType: LoginFailureType.ACCOUNT_LOCKED});\r\n                }\r\n                else {\r\n                    console.error(\"Unknown 401 status code response\", error);\r\n                }\r\n            }\r\n            else if ( error.response.status === 500 ) {\r\n                this.setState({loginFailureType: LoginFailureType.INTERNAL_SERVER_ERROR});\r\n            }\r\n            else {\r\n                console.error('Unhandled error'); // TODO: Handle this\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        if ( this.state.loginFailureType === LoginFailureType.ACCOUNT_LOCKED ) {\r\n            return (<Redirect to=\"/findaccount\"/>);\r\n        }\r\n\r\n        return (\r\n            <div className=\"auth-page-container\">\r\n                <div className=\"auth-page\">\r\n                    <Typography className=\"auth-header\" color=\"primary\" variant=\"h4\">Login to Your Account</Typography>\r\n                    <form className=\"auth-form\">\r\n                        <TextField onChange={this.handleEmailChange} className=\"auth-txt-field\" label=\"Email\" variant=\"filled\" error={this.emailHasError()} helperText=\"Enter your email\"/>\r\n                        <PasswordInput onChange={this.handlePasswordChange} inputProps={{ maxLength: 32 }} className=\"auth-txt-field\" error={this.passwordHasError()} helperText=\"Enter your password\" label=\"Password\"/>\r\n                        <AuthContextConsumer>\r\n                        {context => (\r\n                            <Button onClick={ e => this.handleSubmit(context.login)} className=\"auth-btn\" variant=\"contained\" color=\"primary\" size=\"medium\">Login</Button>\r\n                        )}\r\n                        </AuthContextConsumer>\r\n                        <FormHelperText className={`auth-err ${this.hasFormError() ? \"\" : \"display-none\"}`} error={true}>{this.getFormErrorText()}</FormHelperText>\r\n                        <div className=\"non-important-btns-container\">\r\n                            <Link className=\"no-underline\" to=\"/register\">\r\n                                <Button className=\"non-important-btn\" color=\"primary\">Create Account</Button>\r\n                            </Link>\r\n                            <Link className=\"no-underline\" to=\"/findaccount\">\r\n                                <Button className=\"non-important-btn\" color=\"primary\">Forgot Password?</Button>\r\n                            </Link>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Login;","import { InputAdornment } from '@material-ui/core';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport VisibilityIcon from '@material-ui/icons/Visibility';\r\nimport VisibilityOffIcon from '@material-ui/icons/VisibilityOff';\r\nimport React, {Component } from 'react';\r\n\r\nimport './PasswordInput.css';\r\n\r\ntype PasswordInputState = {\r\n    passwordIsMasked: boolean\r\n}\r\n\r\n//https://itnext.io/building-a-toggled-mask-password-input-component-w-react-and-material-ui-f55e6bd73434\r\n\r\n\r\ntype PasswordInputProps = {\r\n    classes?: any,\r\n    onChange?: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n    value?: string,\r\n    error?: boolean,\r\n    helperText?: string,\r\n    label?: string,\r\n    className?: string,\r\n    inputProps?: object,\r\n}\r\n\r\nclass PasswordInput extends Component<PasswordInputProps, PasswordInputState> {\r\n    constructor(props: PasswordInputProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            passwordIsMasked: true\r\n        };\r\n    }\r\n\r\n    togglePasswordMask = () => {\r\n        this.setState(prevState => ({\r\n            passwordIsMasked: !prevState.passwordIsMasked\r\n        }));\r\n    }\r\n\r\n    getVisibilityIcon() {\r\n        if ( this.state.passwordIsMasked ) {\r\n            return (\r\n                <VisibilityIcon color=\"primary\" onClick={this.togglePasswordMask} className=\"clickable-icon\"/>\r\n            );\r\n        }\r\n        \r\n        return (\r\n            <VisibilityOffIcon color=\"primary\" onClick={this.togglePasswordMask} className=\"clickable-icon\"/>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n        const { passwordIsMasked } = this.state;\r\n\r\n        return (\r\n            <TextField\r\n                variant=\"filled\"\r\n                type={passwordIsMasked ? 'password' : 'text'}\r\n                {...this.props}\r\n                InputProps={{\r\n                    endAdornment: (\r\n                        <InputAdornment position=\"end\">\r\n                            {this.getVisibilityIcon()}\r\n                        </InputAdornment>\r\n                    ),\r\n                }}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default PasswordInput;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\n\r\nimport * as userAPI from '../api/user';\r\n\r\nimport './FindAccount.css';\r\n\r\ntype FindAccountState = {\r\n    contact: string,\r\n    searchAccountFailureType: SearchAccountFailureType,\r\n    submitIsTouched: boolean\r\n}\r\n\r\ntype FindAccountProps = {\r\n    history: any\r\n}\r\n\r\nenum SearchAccountFailureType {\r\n    ACCOUNT_NOT_FOUND,\r\n    INTERNAL_SERVER_ERROR,\r\n    NONE\r\n}\r\n\r\nclass FindAccount extends React.Component<FindAccountProps, FindAccountState> {\r\n\r\n    constructor(props: FindAccountProps) {\r\n        super(props);\r\n\r\n        this.state = { contact: '', searchAccountFailureType: SearchAccountFailureType.NONE, submitIsTouched: false };\r\n\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.handleContactChange = this.handleContactChange.bind(this);\r\n    }\r\n\r\n    handleContactChange(e: any) {\r\n        const contact = e.target.value;\r\n        this.setState({contact});\r\n    }\r\n\r\n    contactHasError(): boolean {\r\n        const { submitIsTouched, contact } = this.state;\r\n\r\n        return contact.length === 0 && submitIsTouched;\r\n    }\r\n\r\n    async handleSubmit(e: any) {\r\n        const { contact } = this.state;\r\n\r\n        this.setState({submitIsTouched: true});\r\n\r\n        if ( contact.length === 0 ) {\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const contactInfo: any = await (await userAPI.findAccount(contact)).data.contactInformation; // TODO: Create model for this\r\n            console.log(\"contactInfo\",contactInfo)\r\n            this.setState({searchAccountFailureType: SearchAccountFailureType.NONE, submitIsTouched: false});\r\n            this.props.history.push(`/pickresetmethod?email=${contactInfo.email}&phone=${contactInfo.phone}`); // TODO: Change this\r\n        }\r\n        catch(error) {\r\n            if ( error.response.status === 404 ) {\r\n                this.setState({searchAccountFailureType: SearchAccountFailureType.ACCOUNT_NOT_FOUND});\r\n            }\r\n            else if ( error.response.status === 500 ) {\r\n                this.setState({searchAccountFailureType: SearchAccountFailureType.INTERNAL_SERVER_ERROR});\r\n            }\r\n        }\r\n    }\r\n\r\n    displayFormError(): boolean {\r\n        return this.state.searchAccountFailureType !== SearchAccountFailureType.NONE;\r\n    }\r\n\r\n    getFormErrorText(): string {\r\n        if ( this.state.searchAccountFailureType === SearchAccountFailureType.ACCOUNT_NOT_FOUND ) {\r\n            return 'We couldnt find an account with that contact information.';\r\n        }\r\n        else if ( this.state.searchAccountFailureType === SearchAccountFailureType.INTERNAL_SERVER_ERROR ) {\r\n            return 'Internal error. Refresh the page.';\r\n        }\r\n\r\n        return '';\r\n    }\r\n\r\n    // TODO: auth-err really should be renamed\r\n    render() {\r\n        return (\r\n            <div className=\"auth-page-container\">\r\n                <div className=\"auth-page\">\r\n                    <Typography className=\"auth-header\" color=\"primary\" variant=\"h4\">Find Account</Typography>\r\n                    <form className=\"auth-form\">\r\n                        <FormHelperText className=\"forgot-pw-desc\">Enter your email or phone number to search for your account.</FormHelperText>\r\n                        <TextField onChange={this.handleContactChange} className=\"auth-txt-field\" label=\"Email or Phone\" variant=\"filled\" error={this.contactHasError()} helperText=\"Enter your email or phone number\"/>\r\n                        <Button onClick={ this.handleSubmit } className=\"auth-btn\" variant=\"contained\" color=\"primary\" size=\"medium\">Search</Button>\r\n                        <FormHelperText className={`auth-err ${this.displayFormError() ? \"\" : \"display-none\"}`} error={true}>{this.getFormErrorText()}</FormHelperText>\r\n                    </form>\r\n                    <div className=\"non-important-btns-container\">\r\n                        <Link className=\"no-underline\" to=\"/login\">\r\n                            <Button className=\"find-email-btn non-important-btn\" color=\"primary\">Cancel</Button>\r\n                        </Link>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default FindAccount;","import React from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\nimport PasswordInput from './PasswordInput';\r\n\r\n\r\n\r\nimport * as auth from '../api/auth';\r\n\r\nimport { AuthContextConsumer } from '../contexts/authContext';\r\n\r\n\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nimport './Register.css';\r\n\r\ntype RegisterState = {\r\n    email: string,\r\n    password: string,\r\n    passwordIsTouched: boolean,\r\n    submitIsTouched: boolean,\r\n    emailIsTaken: boolean,\r\n    internalServerError: boolean\r\n}\r\n\r\ntype RegisterProps = {\r\n    history: any // TODO: Type\r\n}\r\n\r\nclass Register extends React.Component<RegisterProps, RegisterState> {\r\n    constructor(props: RegisterProps) {\r\n        super(props);\r\n\r\n        this.state = { email: '', password: '', passwordIsTouched: false, submitIsTouched: false, emailIsTaken: false, internalServerError: false };\r\n        \r\n        this.handleEmailChange = this.handleEmailChange.bind(this);\r\n        this.handlePasswordChange = this.handlePasswordChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this); \r\n    }\r\n\r\n    handleEmailChange(e: any) {\r\n        const email = e.target.value;\r\n        this.setState({email, emailIsTaken: false});\r\n    }\r\n\r\n    isValidEmail(): boolean {\r\n        const email = this.state.email;\r\n\r\n        const regex = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n\r\n        return regex.test(email);\r\n    }\r\n\r\n    passwordHasCorrectLength(): boolean {\r\n        const password = this.state.password;\r\n\r\n        return password.length >= 8 && password.length <= 32;\r\n    }\r\n\r\n    // TODO: FIX THIS\r\n    // Checks if the password contains numbers, letters, and special characters\r\n    passwordIsValid(): boolean {\r\n        const password = this.state.password;\r\n\r\n        const regex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[^\\da-zA-Z]).{8,32}$/\r\n\r\n        return regex.test(password);\r\n    }\r\n\r\n    handlePasswordChange(e: any) {\r\n        const password = e.target.value;\r\n        this.setState({password, passwordIsTouched: true});\r\n    }\r\n\r\n    emailHasError(): boolean {\r\n        const { submitIsTouched } = this.state;\r\n\r\n        return !this.isValidEmail() && submitIsTouched;\r\n    }\r\n\r\n    getEmailHelperText(): string {\r\n        if ( this.emailHasError() ) {\r\n            return 'Please enter a valid email';\r\n        }\r\n        else if ( this.state.emailIsTaken ) {\r\n            return 'This email is taken, try another.';\r\n        }\r\n        \r\n        return 'Enter your email';\r\n    }\r\n\r\n    passwordHasError(): boolean {\r\n        const { submitIsTouched } = this.state;\r\n\r\n        return !this.passwordIsValid() && submitIsTouched;\r\n    }\r\n\r\n    getPasswordHelperText(): string {\r\n        if ( !this.passwordHasError() ) {\r\n            return 'Enter a password';\r\n        }\r\n        else if ( this.passwordHasCorrectLength() ) {\r\n            return 'Enter between 8 and 32 characters';\r\n        }\r\n    \r\n        return 'Include a letter, number, and special character';\r\n    }\r\n\r\n    hasInternalServerError(): boolean {\r\n        return this.state.internalServerError;\r\n    }\r\n\r\n    async handleSubmit(callback: any) {\r\n        const { email, password } = this.state;\r\n\r\n        this.setState({submitIsTouched: true, internalServerError: false});\r\n\r\n        if ( !this.isValidEmail() || !this.passwordIsValid() ) {\r\n            return;\r\n        }\r\n\r\n        try {\r\n            await auth.register(email,password);\r\n            \r\n            callback();\r\n   \r\n            this.props.history.push('/features/schedule');\r\n        }\r\n        catch ( error ) {\r\n            if ( error.response.status === 409 ) {\r\n                this.setState({emailIsTaken: true});\r\n            }\r\n            else if ( error.response.status === 500 ) {\r\n                this.setState({internalServerError: true});\r\n            }\r\n            else {\r\n                console.error('Unhandled error'); // TODO: Handle this\r\n            }\r\n        }\r\n    }\r\n\r\n    render(): JSX.Element {\r\n        return (\r\n            <div className=\"auth-page-container\">\r\n                <div className=\"auth-page\">\r\n                    <Typography className=\"auth-header\" color=\"primary\" variant=\"h4\">Create a New Account</Typography>\r\n                    <form className=\"auth-form\">\r\n                        <TextField onChange={this.handleEmailChange} name=\"email\" className=\"auth-txt-field\" label=\"Email\" variant=\"filled\" error={this.emailHasError() || this.state.emailIsTaken} helperText={this.getEmailHelperText()}/>\r\n                        <PasswordInput inputProps={{ maxLength: 32 }} onChange={this.handlePasswordChange} className=\"auth-txt-field\" label=\"Password\" error={this.passwordHasError()} helperText={this.getPasswordHelperText()} />\r\n                        <AuthContextConsumer>\r\n                        {context => (\r\n                            <Button onClick={e => this.handleSubmit(context.login)} className=\"auth-btn\" variant=\"contained\" color=\"primary\" size=\"medium\">Register</Button>\r\n                        )}\r\n                        </AuthContextConsumer>\r\n                        <FormHelperText className={`auth-err ${this.hasInternalServerError() ? \"\" : \"display-none\"}`} error={true}>Uh-oh! A problem occured. Please refresh the page and try again.</FormHelperText>\r\n                        <div className=\"non-important-btns-container\">\r\n                            <Link className=\"no-underline\" to=\"/login\">\r\n                                <Button className=\"already-registered-btn non-important-btn\" color=\"primary\">Already Have an Account?</Button>\r\n                            </Link>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Register;","\r\nimport axios from 'axios';\r\n\r\n\r\n\r\nexport const findAccount = (account: string) => {\r\n    return axios.get(`/api/users/findaccount/${account}`);\r\n}\r\n\r\n\r\nexport const sendResetCode = (email: string, selectedContactMethod: string) => {\r\n    return axios.post('/api/users/sendresetcode', {\r\n        email, selectedContactMethod\r\n    });\r\n}\r\n\r\nexport const checkResetCode = (email: string, resetCode: string) => {\r\n    return axios.get('/api/users/checkresetcode', {\r\n\r\n        params: {\r\n            email,\r\n            resetCode\r\n            }\r\n    });\r\n}\r\n\r\nexport const changePassword = (email: string, password: string, resetCode: string) => {\r\n    return axios.post('/api/users/changepassword', {\r\n        email,\r\n        password,\r\n        resetCode\r\n    });\r\n}","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Button from '@material-ui/core/Button';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Radio from '@material-ui/core/Radio';\r\n\r\nimport qs from 'qs';\r\n\r\nimport AccountCircle from '@material-ui/icons/AccountCircle';\r\n\r\nimport * as userAPI from '../api/user';\r\n\r\nimport './PickResetMethod.css';\r\n\r\ntype PickResetMethodState = {\r\n    email: string,\r\n    phone: string,\r\n    selectedContactMethod: string,\r\n    pickResetMethodFailureType: PickResetMethodFailureType,\r\n}\r\n\r\ntype PickResetMethodProps = {\r\n    location: any, // TODO: params\r\n    history: any // TODO: type\r\n}\r\n\r\nenum PickResetMethodFailureType {\r\n    ACCOUNT_NOT_FOUND,\r\n    INTERNAL_SERVER_ERROR,\r\n    NONE\r\n}\r\n\r\nclass PickResetMethod extends React.Component<PickResetMethodProps, PickResetMethodState> {\r\n\r\n    constructor(props: PickResetMethodProps) {\r\n        super(props);\r\n\r\n        let email: any = '';\r\n        let phone: any = '';\r\n\r\n        if (qs.parse(this.props.location.search, { ignoreQueryPrefix: true })) {\r\n            email = qs.parse(this.props.location.search, { ignoreQueryPrefix: true }).email;\r\n            phone = qs.parse(this.props.location.search, { ignoreQueryPrefix: true }).phone;\r\n        }\r\n\r\n        this.state = { email, selectedContactMethod: 'email', phone, pickResetMethodFailureType: PickResetMethodFailureType.NONE };\r\n\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n    handleChange(e: React.ChangeEvent<HTMLInputElement>) {\r\n        this.setState({ selectedContactMethod: e.target.value });\r\n    }\r\n\r\n    displayFormError(): boolean {\r\n        return this.state.pickResetMethodFailureType !== PickResetMethodFailureType.NONE;\r\n    }\r\n\r\n    getFormErrorText(): string {\r\n        if (this.state.pickResetMethodFailureType === PickResetMethodFailureType.ACCOUNT_NOT_FOUND) {\r\n            return 'We couldnt find that email.';\r\n        }\r\n        else if (this.state.pickResetMethodFailureType === PickResetMethodFailureType.INTERNAL_SERVER_ERROR) {\r\n            return 'Internal error. Refresh the page.';\r\n        }\r\n\r\n        return '';\r\n    }\r\n\r\n    async handleSubmit(e: any) {\r\n        try {\r\n            const { email, phone, selectedContactMethod } = this.state;\r\n\r\n            this.setState({ pickResetMethodFailureType: PickResetMethodFailureType.NONE });\r\n\r\n            await userAPI.sendResetCode(email, selectedContactMethod);\r\n\r\n            this.props.history.push(`/entercode?email=${email}&phone=${phone}&selectedContactMethod=${selectedContactMethod}`);\r\n        }\r\n        catch (error) {\r\n            if (error.response.status === 404) {\r\n                this.setState({ pickResetMethodFailureType: PickResetMethodFailureType.ACCOUNT_NOT_FOUND }); // This should never actually happen, do we really need it?\r\n            }\r\n            else if (error.response.status === 500) {\r\n                this.setState({ pickResetMethodFailureType: PickResetMethodFailureType.INTERNAL_SERVER_ERROR });\r\n            }\r\n        }\r\n    }\r\n    \r\n    render() {\r\n        const { email, phone } = this.state;\r\n\r\n        let emailOption = (\r\n            <div>\r\n                <div className=\"contact\">\r\n                    <div>\r\n                        <div className=\"contact-method\">Send Code Via Email</div>\r\n                        <div className=\"contact-detail\">{this.state.email}</div>\r\n                    </div>\r\n                    <div className=\"radio-container\">\r\n                        <Radio color=\"primary\" checked={this.state.selectedContactMethod === 'email'} onChange={this.handleChange} value=\"email\" />\r\n                    </div>\r\n                </div>\r\n                <Divider className=\"contact-divider\" />\r\n            </div>\r\n        );\r\n\r\n        let phoneOption = (\r\n            <div>\r\n                <div className=\"contact\">\r\n                    <div>\r\n                        <div className=\"contact-method\">Send Code Via SMS</div>\r\n                        <div className=\"contact-detail\">{this.state.phone}</div>\r\n                    </div>\r\n                    <div className=\"radio-container\">\r\n                        <Radio color=\"primary\" checked={this.state.selectedContactMethod === 'phone'} onChange={this.handleChange} value=\"phone\" />\r\n                    </div>\r\n                </div>\r\n                <Divider className=\"contact-divider\" />\r\n            </div>\r\n        );\r\n\r\n        return (\r\n            <div className=\"auth-page-container\">\r\n                <div className=\"auth-page\">\r\n                    <Typography className=\"auth-header\" color=\"primary\" variant=\"h4\">Pick Reset Method</Typography>\r\n                    <form className=\"auth-form\">\r\n                        <Paper elevation={1} className=\"find-account-icon-container\">\r\n                            <AccountCircle color=\"primary\" className=\"find-account-icon\" />\r\n                            <div>{this.state.email}</div>\r\n                        </Paper>\r\n                        <div className=\"auth-instructions desktop-only\">Select how you would like to recieve the code to reset your password.</div>\r\n                        <Divider className=\"contact-divider\" />\r\n                        {email && emailOption}\r\n                        {phone && phoneOption}\r\n                        <Button onClick={this.handleSubmit} className=\"auth-btn\" variant=\"contained\" color=\"primary\" size=\"medium\">Send Code</Button>\r\n                        <FormHelperText className={`auth-err ${this.displayFormError() ? \"\" : \"display-none\"}`} error={true}>{this.getFormErrorText()}</FormHelperText>\r\n                    </form>\r\n                    <div className=\"non-important-btns-container\">\r\n                        <Link className=\"no-underline\" to=\"/findaccount\">\r\n                            <Button className=\"find-email-btn non-important-btn\" color=\"primary\">Not You?</Button>\r\n                        </Link>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PickResetMethod;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\n\r\n\r\nimport qs from 'qs';\r\n\r\nimport * as userAPI from '../api/user';\r\n\r\nimport './EnterCode.css';\r\n\r\nenum EnterCodeStatusType {\r\n    NONE,\r\n    INVALID_PASSCODE,\r\n    CODE_EXPIRED,\r\n    TOO_MANY_ATTEMPTS,\r\n    INTERNAL_SERVER_ERROR,\r\n    RESENT_CODE\r\n}\r\n\r\ntype EnterCodeState = {\r\n    selectedContactMethod: string,\r\n    email: string,\r\n    phone: string,\r\n    submitIsTouched: boolean,\r\n    code: string,\r\n    enterCodeStatusType: EnterCodeStatusType\r\n}\r\n\r\ntype EnterCodeProps = {\r\n    location: any, // TODO: type\r\n    history: any, // TODO: type\r\n}\r\n\r\n\r\nclass EnterCode extends React.Component<EnterCodeProps, EnterCodeState> {\r\n\r\n    constructor(props: EnterCodeProps) {\r\n        super(props);\r\n\r\n        let selectedContactMethod: any = '';\r\n        let email: any = '';\r\n        let phone: any = '';\r\n\r\n        let qsParse: qs.ParsedQs = qs.parse(this.props.location.search, { ignoreQueryPrefix: true });\r\n\r\n        if ( qsParse ) {\r\n            selectedContactMethod = qsParse.selectedContactMethod;\r\n            email = qsParse.email; // Need email either way for back button\r\n            \r\n            if ( selectedContactMethod === 'phone' ) {\r\n                phone = qsParse.phone;\r\n            }\r\n        }\r\n\r\n        this.state = { selectedContactMethod, email, phone, submitIsTouched: false, code: '', enterCodeStatusType: EnterCodeStatusType.NONE };\r\n\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.handleCodeChange = this.handleCodeChange.bind(this);\r\n        this.resendCodeClicked = this.resendCodeClicked.bind(this);\r\n    }\r\n\r\n    handleCodeChange(e: any) {\r\n        const code: string = e.target.value;\r\n        this.setState({code});\r\n    }\r\n\r\n    getCodeHelperText(): string {\r\n        if ( this.displayCodeTextFieldError() ) {\r\n            return 'Code must be 8 digits';\r\n        }\r\n\r\n        const { selectedContactMethod} = this.state;\r\n        \r\n        return `Enter the 8 digit code sent to your ${selectedContactMethod}.`;\r\n    }\r\n\r\n    codeIsValid(): boolean {\r\n        return this.state.code.length === 8;\r\n    }\r\n\r\n    displayCodeTextFieldError(): boolean {\r\n        const { submitIsTouched, code } = this.state;\r\n\r\n        if ( !submitIsTouched ) {\r\n            return false\r\n        }\r\n\r\n        return !this.codeIsValid();\r\n    }\r\n      \r\n    async handleSubmit(e: any) {\r\n        this.setState({submitIsTouched: true});\r\n\r\n        if ( !this.codeIsValid() ) {\r\n            return;\r\n        }\r\n        \r\n        const { email, code, selectedContactMethod, phone } = this.state;\r\n\r\n        try {\r\n\r\n            await userAPI.checkResetCode(email, code);\r\n\r\n            this.setState({enterCodeStatusType: EnterCodeStatusType.NONE});\r\n\r\n            // TODO: should I just do history.back or something\r\n            if (selectedContactMethod === 'email') {\r\n                this.props.history.push(`/resetpassword?email=${email}&code=${code}`);\r\n            }\r\n            else {\r\n                this.props.history.push(`/resetpassword?email=${email}&code=${code}`);\r\n            }\r\n        }\r\n        catch(error) {\r\n            console.error(\"error\",error)\r\n\r\n            if ( error.response.status === 401 ) {\r\n                if ( error.response.data.message === 'Invalid email/passcode combination') {\r\n                    this.setState({enterCodeStatusType: EnterCodeStatusType.INVALID_PASSCODE});\r\n                }\r\n                else if ( error.response.data.message === 'Reset code has expired' ) {\r\n                    this.setState({enterCodeStatusType: EnterCodeStatusType.CODE_EXPIRED});\r\n                }\r\n                else if ( error.response.data.message === 'Too many failed attempts' ) {\r\n                    this.setState({enterCodeStatusType: EnterCodeStatusType.TOO_MANY_ATTEMPTS});\r\n                }\r\n            }\r\n            else { //500, 'The server encountered an unknown error.', 400, Email and/or resetCode not sent (shouldn't ever happen)\r\n                this.setState({enterCodeStatusType: EnterCodeStatusType.INTERNAL_SERVER_ERROR});\r\n            }\r\n        }\r\n    }\r\n\r\n    displayFormHelperText(): boolean {\r\n        return this.state.enterCodeStatusType !== EnterCodeStatusType.NONE;\r\n    }\r\n\r\n    getFormHelperText(): string {\r\n        const { enterCodeStatusType, selectedContactMethod, email, phone } = this.state;\r\n\r\n        if ( enterCodeStatusType === EnterCodeStatusType.INVALID_PASSCODE ) {\r\n            return 'Wrong code, try again.';\r\n        }\r\n        else if ( enterCodeStatusType === EnterCodeStatusType.CODE_EXPIRED ) {\r\n            return 'This code has expired.';\r\n        }\r\n        else if ( enterCodeStatusType === EnterCodeStatusType.TOO_MANY_ATTEMPTS ) {\r\n            return 'Too many failed attempts.';\r\n        }\r\n        else if ( enterCodeStatusType === EnterCodeStatusType.INTERNAL_SERVER_ERROR ) {\r\n            return 'Internal server error. Please refresh the page and try again.';\r\n        }\r\n        else if ( enterCodeStatusType === EnterCodeStatusType.RESENT_CODE) {\r\n            return `Another code has been sent to ${selectedContactMethod === 'email' ? email : phone}`;\r\n        }\r\n\r\n        return '';\r\n    }\r\n\r\n    formHelperTextIsError(): boolean {\r\n        return this.state.enterCodeStatusType !== EnterCodeStatusType.RESENT_CODE;\r\n    }\r\n\r\n    displayResendCodeLink(): boolean {\r\n        const enterCodeStatusType: EnterCodeStatusType = this.state.enterCodeStatusType;\r\n\r\n        return  enterCodeStatusType === EnterCodeStatusType.TOO_MANY_ATTEMPTS || enterCodeStatusType === EnterCodeStatusType.CODE_EXPIRED;\r\n    }\r\n\r\n    async resendCodeClicked(e: any) { // TODO: Type\r\n        const { email, selectedContactMethod } = this.state;\r\n\r\n        try {\r\n            await userAPI.sendResetCode(email, selectedContactMethod);\r\n\r\n            this.setState({enterCodeStatusType: EnterCodeStatusType.RESENT_CODE});   \r\n        }\r\n        catch (error) {\r\n            this.setState({ enterCodeStatusType: EnterCodeStatusType.INTERNAL_SERVER_ERROR });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { selectedContactMethod, phone, email } = this.state;\r\n        const contactDetail = selectedContactMethod === 'email' ? email : phone;\r\n        return (\r\n            <div className=\"auth-page-container\">\r\n                <div className=\"auth-page\">\r\n                    <Typography className=\"auth-header\" color=\"primary\" variant=\"h4\">Enter Security Code</Typography>\r\n                    <form className=\"auth-form\">\r\n                        <div className=\"auth-instructions desktop-only\">Please check your {selectedContactMethod} for the 8 digit code that was sent to {contactDetail}.</div>\r\n                        <TextField onChange={this.handleCodeChange} className=\"auth-txt-field\" label=\"########\" variant=\"filled\" helperText={this.getCodeHelperText()} error={this.displayCodeTextFieldError()}/>\r\n                        <Button onClick={ this.handleSubmit } className=\"auth-btn\" variant=\"contained\" color=\"primary\" size=\"medium\">Enter Code</Button>\r\n                        <FormHelperText className={`auth-err ${this.displayFormHelperText() ? \"\" : \"display-none\"}`} error={this.formHelperTextIsError()}>{this.getFormHelperText()}<span className={`resend-code ${this.displayResendCodeLink() ? \"\" : \"display-none\"}`} onClick={this.resendCodeClicked}>Resend Code?</span></FormHelperText>\r\n                    </form>\r\n                    <div className=\"non-important-btns-container\">\r\n                        <Link className=\"no-underline\" to={`/pickresetmethod?email=${email}&phone=${phone}`}>\r\n                            <Button className=\"enter-code-btn non-important-btn\" color=\"primary\">Try Another Way</Button>\r\n                        </Link>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default EnterCode;","import React from 'react';\r\nimport { AuthContextConsumer } from '../contexts/authContext';\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\n\r\nimport CheckCircleOutlineIcon from '@material-ui/icons/CheckCircleOutline';\r\n\r\nimport qs from 'qs';\r\n\r\nimport * as userAPI from '../api/user';\r\n\r\n\r\nimport PasswordInput from './PasswordInput';\r\n\r\nimport './ResetPassword.css';\r\n\r\ntype ResetPasswordState = {\r\n    resetPasswordFailureType: ResetPasswordFailureType,\r\n    code: string,\r\n    email: string,\r\n    password: string,\r\n    submitButtonTouched: boolean,\r\n    passwordChangeSuccess: boolean\r\n}\r\ntype ResetPasswordProps = {\r\n    location: any, // TODO: TYPE\r\n    history: any // TODO: Type\r\n}\r\n\r\nenum ResetPasswordFailureType {\r\n    PASSWORD_EXPIRED,\r\n    INTERNAL_SERVER_ERROR,\r\n    NONE\r\n}\r\n\r\nclass ResetPassword extends React.Component<ResetPasswordProps, ResetPasswordState> {\r\n\r\n    constructor(props: ResetPasswordProps) {\r\n        super(props);\r\n\r\n        let qsParse: qs.ParsedQs = qs.parse(this.props.location.search, { ignoreQueryPrefix: true });\r\n\r\n        let code: any = '';\r\n        let email: any = '';\r\n\r\n        if ( qsParse ) {\r\n            code = qsParse.code;\r\n            email = qsParse.email; // Need email either way for back button            \r\n        }\r\n\r\n        this.state = {\r\n            code,\r\n            email,\r\n            password: '',\r\n            resetPasswordFailureType: ResetPasswordFailureType.NONE,\r\n            submitButtonTouched: false,\r\n            passwordChangeSuccess: false \r\n        };\r\n\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.handlePasswordChange = this.handlePasswordChange.bind(this);\r\n    }\r\n\r\n    handlePasswordChange(e: any) {\r\n        const password = e.target.value;\r\n        this.setState({password});\r\n    }\r\n\r\n    displayPasswordError(): boolean {\r\n        return !this.passwordIsValid() && this.state.submitButtonTouched;\r\n    }\r\n\r\n    passwordHasCorrectLength(): boolean {\r\n        const { password } = this.state;\r\n\r\n        return password.length >= 8 && password.length <= 32;\r\n    }\r\n    \r\n    // TODO: Fix this\r\n    passwordHasCorrectCharacters(): boolean {\r\n        const { password } = this.state;\r\n\r\n        const regex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[^\\da-zA-Z]).{8,32}$/\r\n\r\n        return regex.test(password);\r\n\r\n    }\r\n\r\n    passwordIsValid(): boolean {\r\n        return this.passwordHasCorrectCharacters() && this.passwordHasCorrectLength();\r\n    }\r\n\r\n    getPasswordHelperText(): string {\r\n        const { submitButtonTouched } = this.state;\r\n\r\n        if ( !this.passwordHasCorrectLength() && submitButtonTouched ) {\r\n            return 'Enter between 8 and 32 characters';\r\n        }\r\n        else if ( !this.passwordHasCorrectCharacters() && submitButtonTouched ) {\r\n            return 'Include a letter, number, and special character';\r\n        }\r\n    \r\n        return 'Enter your new password';\r\n    }\r\n\r\n    displayFormError(): boolean {\r\n        return this.state.resetPasswordFailureType !== ResetPasswordFailureType.NONE;\r\n    }\r\n\r\n    getFormErrorText(): string {\r\n        const { resetPasswordFailureType } = this.state;\r\n\r\n        if ( resetPasswordFailureType === ResetPasswordFailureType.PASSWORD_EXPIRED ) {\r\n            return 'This reset code has expired.';\r\n        }\r\n        else if ( resetPasswordFailureType === ResetPasswordFailureType.INTERNAL_SERVER_ERROR ) {\r\n            return 'Internal server error. Please refresh the page and try again.';\r\n        }\r\n\r\n        return '';\r\n    }\r\n      \r\n    async handleSubmit(callback: any) { // TODO: Rename this\r\n        const { email, password, code } = this.state;\r\n\r\n        this.setState({submitButtonTouched: true});\r\n\r\n        if ( !this.passwordIsValid() ) {\r\n            return;\r\n        }\r\n\r\n        try {\r\n            await userAPI.changePassword(email, password, code);\r\n            this.setState({resetPasswordFailureType: ResetPasswordFailureType.NONE, passwordChangeSuccess: true});\r\n   \r\n            callback();\r\n\r\n            setTimeout( () => {\r\n                this.props.history.push('/features/schedule');\r\n            }, 500);\r\n        }\r\n        catch ( error ) {\r\n            if ( error.response.status === 401 && error.response.data.message === 'Reset code has expired' ) {\r\n                this.setState({resetPasswordFailureType: ResetPasswordFailureType.PASSWORD_EXPIRED});\r\n                console.log('error.response.data',error.response.data);\r\n            }\r\n            else {\r\n                this.setState({resetPasswordFailureType: ResetPasswordFailureType.INTERNAL_SERVER_ERROR});\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n        const {passwordChangeSuccess} = this.state;\r\n\r\n        return (\r\n            <div className=\"auth-page-container\">\r\n                <div className=\"auth-page\">\r\n                    <Typography className=\"auth-header\" color=\"primary\" variant=\"h4\">Reset Password</Typography>\r\n                    <form className=\"auth-form\">\r\n                        <div className=\"auth-instructions desktop-only\">Enter a new password between 8 and 32 characters. Include at least one uppercase letter, lowercase letter, number, and special character. </div>\r\n                        <PasswordInput onChange={this.handlePasswordChange} inputProps={{ maxLength: 32 }} className=\"auth-txt-field\" error={this.displayPasswordError()} helperText={this.getPasswordHelperText()} label=\"New Password\"/>\r\n                        <AuthContextConsumer>\r\n                        {context => (\r\n                            <Button onClick={ e => this.handleSubmit(context.login) } className=\"auth-btn\" variant=\"contained\" color=\"primary\" size=\"medium\">Change Password</Button>\r\n                        )}\r\n                        </AuthContextConsumer>\r\n                        <FormHelperText className={`auth-err ${this.displayFormError() ? \"\" : \"display-none\"}`} error={this.displayFormError()}>{this.getFormErrorText()}</FormHelperText>\r\n                        <div className={`change-pw-success ${passwordChangeSuccess ? \"\" : \"display-none\"}`}>\r\n                            <div className=\"change-pw-success-txt\">Password Changed</div>\r\n                            <CheckCircleOutlineIcon color=\"primary\"/>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ResetPassword;","import React from 'react';\r\nimport { Route, Redirect  } from 'react-router-dom';\r\n\r\nimport { AuthContextConsumer } from '../contexts/authContext';\r\n\r\nimport Login from './Login';\r\n\r\ntype PrivateRouteState = {}\r\ntype PrivateRouteProps = { options?: any, component?: any, children?: any, path?: any }\r\n\r\nclass PrivateRoute extends React.Component<PrivateRouteProps, PrivateRouteState> {\r\n\r\n    render() {\r\n      const { options, component, children } = this.props;\r\n\r\n      return (\r\n        <AuthContextConsumer>\r\n          {\r\n\r\n          (context) => { return context.isLoggedIn ? (\r\n            <Route path={this.props.path} {...options} component={ context.isLoggedIn ? component : Login}>{children}</Route> )\r\n            : (<Redirect to=\"/login\"/>)\r\n          }\r\n          \r\n          }\r\n        </AuthContextConsumer>\r\n      );\r\n    }\r\n}\r\n\r\nexport default PrivateRoute;","import { Route, BrowserRouter as Router, Switch } from 'react-router-dom';\r\n\r\nimport ContactSettings from './components/ContactSettings';\r\nimport Main from './components/Main';\r\nimport Medicine from './components/Medicine';\r\nimport Alarms from './components/Alarms';\r\nimport Schedule from './components/Schedule';\r\nimport AccountSettings from './components/AccountSettings';\r\nimport Splash from './components/Splash';\r\nimport Login from './components/Login';\r\nimport Register from './components/Register';\r\nimport FindAccount from './components/FindAccount';\r\nimport PickResetMethod from './components/PickResetMethod';\r\nimport EnterCode from './components/EnterCode';\r\nimport ResetPassword from './components/ResetPassword';\r\n\r\nimport PrivateRoute from './components/PrivateRoute';\r\n\r\nimport './App.css';\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <Switch>\r\n        <Route exact path=\"/register\" component={Register} />\r\n        <Route exact path=\"/login\" component={Login} />\r\n        <Route exact path=\"/findaccount\" component={FindAccount} />\r\n        <Route exact path=\"/pickresetmethod\" component={PickResetMethod} />\r\n        <Route exact path=\"/entercode\" component={EnterCode} />\r\n        <Route exact path=\"/resetpassword\" component={ResetPassword} />\r\n        <Route exact path=\"/\" component={Splash} />\r\n        <PrivateRoute path=\"/features\">\r\n          <Main>\r\n            <Route path=\"/features/medicine\" component={Medicine} />\r\n            <Route path=\"/features/contactsettings\" component={ContactSettings} />\r\n            <Route path=\"/features/alarms\" component={Alarms} />\r\n            <Route path=\"/features/schedule\" component={Schedule} />\r\n            <Route path=\"/features/accountsettings\" component={AccountSettings} />\r\n          </Main>\r\n        </PrivateRoute>\r\n      </Switch>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { createMuiTheme, responsiveFontSizes } from '@material-ui/core/styles';\r\nimport orange from '@material-ui/core/colors/orange';\r\nimport teal from '@material-ui/core/colors/teal';\r\n\r\nlet theme = createMuiTheme({\r\n  palette: {\r\n    primary: teal,\r\n    secondary: orange\r\n  },\r\n  status: {\r\n      danger: 'red'\r\n  }\r\n});\r\n\r\ntheme = responsiveFontSizes(theme);\r\n\r\nexport default theme;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { ThemeProvider } from '@material-ui/core/styles';\r\n\r\nimport { AuthContextProvider } from \"./contexts/authContext\";\r\n\r\nimport theme from './theme';\r\n\r\nReactDOM.render(\r\n  //<React.StrictMode>\r\n    <AuthContextProvider>\r\n      <ThemeProvider theme={theme}>\r\n        <App />\r\n      </ThemeProvider>\r\n    </AuthContextProvider>,\r\n  //</React.StrictMode>\r\n\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}